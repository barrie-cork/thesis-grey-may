---
description: 
globs: 
alwaysApply: false
---
## Thesis Grey Database and Entities

- Thesis Grey uses PostgreSQL with Prisma for database access.
- **Entity models are defined *exclusively* in `schema.prisma`**. The `main.wasp` file should *not* contain `entity` or `schema prisma { ... }` declarations (valid for Wasp v0.14+).
- `main.wasp` *references* entities (e.g., in `app.auth.userEntity` or the `entities` list for queries/actions) to provide context to operations.
- Core entities are defined in `schema.prisma` (ensure `User`, `Auth`, `AuthIdentity`, `Session` are present if using built-in auth).

### Server-Side Query/Action Implementation (TypeScript)

- **Fetching Relations:** Use Prisma's `include` or `select` within server functions (`*.queries.ts`, `*.actions.ts`) to fetch related data.
- **Typing Server Operations (Queries/Actions):**
    - Import the generated operation type from `wasp/server/operations` (e.g., `import { type GetMyQuery } from 'wasp/server/operations'`, `import { type MyAction } from 'wasp/server/operations'`).
    - **Recommended:** Use the `satisfies` keyword on the operation implementation. This allows TypeScript and Wasp to infer the precise types for `args`, `context` (including `context.user` and `context.entities` based on `main.wasp`), and the return type.
      ```typescript
      // In src/server/{feature}/actions.ts
      import { type MyAction } from 'wasp/server/operations'
      
      export const myAction = (async (args, context) => {
        // args type inferred from usage (e.g., args.description)
        // context type inferred from main.wasp (e.g., context.user, context.entities.MyEntity)
        if (!context.user) { throw new HttpError(401); }
        const result = await context.entities.MyEntity.create({ data: { description: args.description, userId: context.user.id } });
        return result; // Return type inferred
      }) satisfies MyAction;
      ```
    - **Fallback (if `satisfies` inference fails, e.g., `args` becomes `never`):** Explicitly type the `args` parameter inline. Type casting `context` is generally *not* needed if `entities` are correctly listed in `main.wasp`.
      ```typescript
      import { type MyAction } from 'wasp/server/operations'
      import { type User, type MyEntity } from 'wasp/entities' // Import User for context typing if needed
      
      export const myAction = (async (
        args: { description: string }, // Explicit args type
        context // Context type usually still inferred correctly
      ) => { 
        // Optional: const { user, entities } = context as { user: User | null, entities: { MyEntity: any } }; 
        if (!context.user) { throw new HttpError(401); }
        // ... implementation ...
      }) satisfies MyAction; // Still use satisfies for overall check
      ```
    - Explicitly typing the function signature (`const myAction: MyAction<ArgsType, ReturnType> = ...`) is generally discouraged as it's more verbose and error-prone than `satisfies`.

## Database Migrations

- After making **any** changes to `schema.prisma`, you **must** create and apply a database migration.
- Run `wasp db migrate-dev --name <descriptive-migration-name>`.
- Wasp automatically detects schema drift. If you see warnings during `wasp start` or runtime errors like `PrismaClientKnownRequestError: The table ... does not exist`, it means you likely forgot to migrate.
- Consult the Wasp documentation for more advanced migration scenarios (production, seeding, etc.). 