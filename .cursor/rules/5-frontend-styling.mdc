---
description: 
globs: 
alwaysApply: true
---
# 5. Thesis Grey Frontend and Styling

This document outlines the conventions for building the Thesis Grey user interface with React and styling it with Tailwind CSS and Shadcn UI.

## React Components Structure

Thesis Grey organizes its React components by feature:

```
src/client/
├── auth/                  # Authentication-related components
│   ├── components/        # Reusable auth components
│   └── pages/             # Auth pages (Login, Signup, Profile)
├── searchStrategy/        # Search strategy builder components
│   ├── components/        # Session management components 
│   └── pages/             # Search strategy pages
├── serpExecution/         # Search execution components
│   ├── components/        # Execution UI components
│   └── pages/             # Execution pages
├── resultsManager/        # Results processing components
│   ├── components/        # Results list and processing components
│   └── pages/             # Results management pages
├── reviewResults/         # Review interface components
│   ├── components/        # Tagging and review components
│   └── pages/             # Review pages
├── reporting/             # Reporting components
│   ├── components/        # PRISMA flow and statistics components
│   └── pages/             # Reporting pages
├── shared/                # Shared utilities and components
│   ├── components/        # Shared application components
│   │   ├── ui/            # Shadcn UI components (Button, Card, Input, etc.)
│   └── lib/               # Shared utilities
└── pages/                 # Top-level pages (Home)
```

## Common Component Patterns

### Page Components

Page components in Thesis Grey follow this pattern:

```tsx
// src/client/featureName/pages/FeaturePage.tsx
import { useQuery } from 'wasp/client/operations';
import { getSomeData } from 'wasp/client/operations';
import { PageHeader } from '../../components/layout/PageHeader';
import { FeatureComponent } from '../components/FeatureComponent';

export function FeaturePage() {
  const { data, isLoading, error } = useQuery(getSomeData);
  
  if (isLoading) return <div className="p-4">Loading...</div>;
  if (error) return <div className="p-4 text-red-600">Error: {error.message}</div>;
  
  return (
    <div className="container mx-auto p-4">
      <PageHeader title="Feature Title" />
      <FeatureComponent data={data} />
    </div>
  );
}
```

### Reusable Components

Reusable components are broken down by responsibility and stored in feature-specific `components` directories:

```tsx
// src/client/featureName/components/ComponentName.tsx
import { useState } from 'react';

type ComponentProps = {
  data: SomeType[];
  onAction: (id: string) => void;
};

export function ComponentName({ data, onAction }: ComponentProps) {
  const [selectedId, setSelectedId] = useState<string | null>(null);
  
  return (
    <div className="rounded-lg bg-white shadow p-4">
      {/* Component content */}
    </div>
  );
}
```

## UI Component Library: Shadcn UI

Thesis Grey uses Shadcn UI as its component library, which provides accessible, customizable components built on Radix UI primitives and styled with Tailwind CSS.

### Shadcn UI Structure

Shadcn UI components are stored in `src/client/shared/components/ui` and follow these patterns:

```
src/client/shared/
├── components/
│   ├── ui/               # Shadcn UI components
│   │   ├── button.tsx    # Button component
│   │   ├── card.tsx      # Card component
│   │   ├── input.tsx     # Input component
│   │   ├── dialog.tsx    # Dialog component
│   │   └── ...           # Other UI components
└── lib/
    └── utils.ts          # Utility functions for Shadcn UI (cn helper, etc.)
```

### Using Shadcn UI Components

Import and use Shadcn UI components in your feature components like this:

```tsx
import { Button } from '../../shared/components/ui/button';
import { Card, CardHeader, CardContent, CardFooter } from '../../shared/components/ui/card';
import { Input } from '../../shared/components/ui/input';

export function MyFeatureComponent() {
  return (
    <Card>
      <CardHeader>
        <h3 className="text-lg font-semibold">Card Title</h3>
      </CardHeader>
      <CardContent>
        <Input placeholder="Enter your text here" />
      </CardContent>
      <CardFooter>
        <Button>Submit</Button>
      </CardFooter>
    </Card>
  );
}
```

### Shadcn UI Component Variants

Shadcn UI components support variants through a class-variance-authority system. For example:

```tsx
// Using Button variants
<Button variant="default">Default Button</Button>
<Button variant="destructive">Destructive Button</Button>
<Button variant="outline">Outline Button</Button>
<Button variant="secondary">Secondary Button</Button>
<Button variant="ghost">Ghost Button</Button>
<Button variant="link">Link Button</Button>

// Using size variants
<Button size="default">Default Size</Button>
<Button size="sm">Small Button</Button>
<Button size="lg">Large Button</Button>
<Button size="icon">Icon Button</Button>
```

## TailwindCSS Usage in Thesis Grey

Thesis Grey uses Tailwind CSS for all styling with these conventions:

### Common UI Patterns

- **Containers**: `container mx-auto p-4`
- **Cards**: Use Shadcn's Card component or `rounded-lg bg-white shadow p-4`
- **Buttons**: Use Shadcn's Button component with variants
  - Primary: `<Button>Primary</Button>` or `bg-primary text-primary-foreground`
  - Secondary: `<Button variant="secondary">Secondary</Button>` or `bg-secondary text-secondary-foreground`
  - Destructive: `<Button variant="destructive">Danger</Button>` or `bg-destructive text-destructive-foreground`
  - Outline: `<Button variant="outline">Outline</Button>` or `border border-input bg-background`
- **Forms**:
  - Input: Use Shadcn's Input component or `w-full rounded-md border border-input bg-background px-3 py-2`
  - Label: `block text-sm font-medium text-gray-700 mb-1`
  - Form Group: `mb-4`

### CSS Variables

Shadcn UI uses CSS variables for theming, which are defined in `src/client/global.css`:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
  }
  
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    /* Other dark mode variables... */
  }
}
```

### Feature-Specific UI Components

#### Search Strategy Builder

The search strategy builder uses Shadcn UI Card components for sessions and queries:

```tsx
// Session list component example
import { Card, CardHeader, CardContent, CardFooter } from '../../shared/components/ui/card';
import { Button } from '../../shared/components/ui/button';

export function SessionList({ sessions }) {
  return (
    <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
      {sessions.map(session => (
        <Card key={session.id} className="hover:shadow-md transition">
          <CardHeader>
            <h3 className="text-lg font-medium">{session.name}</h3>
            <p className="text-muted-foreground">{session.description || 'No description'}</p>
          </CardHeader>
          <CardFooter className="flex justify-between">
            <span className="text-sm text-muted-foreground">
              {session.searchQueries.length} queries
            </span>
            <Button variant="link" asChild>
              <Link to={`/search-execution/${session.id}`}>
                View Session
              </Link>
            </Button>
          </CardFooter>
        </Card>
      ))}
    </div>
  );
}
```

#### Results Review Interface

The review interface uses a split-panel design with tagging functionality:

```tsx
// Example tag component
import { Button } from '../../shared/components/ui/button';

export function TagList({ tags, onTagSelect, selectedTagId }) {
  return (
    <div className="flex flex-wrap gap-2 mb-4">
      {tags.map(tag => (
        <Button
          key={tag.id}
          onClick={() => onTagSelect(tag.id)}
          variant="outline"
          className={`px-3 py-1 rounded-full text-sm ${
            selectedTagId === tag.id
              ? 'bg-opacity-100'
              : 'bg-opacity-50 hover:bg-opacity-70'
          }`}
          style={{ backgroundColor: tag.color, color: getContrastColor(tag.color) }}
        >
          {tag.name}
        </Button>
      ))}
    </div>
  );
}
```

## Responsive Design

Thesis Grey implements responsive design using Tailwind's breakpoint system:

- Mobile-first approach with progressive enhancement
- Key breakpoints:
  - `sm`: 640px (small devices)
  - `md`: 768px (medium devices)
  - `lg`: 1024px (large devices)
  - `xl`: 1280px (extra large devices)

Example responsive layout:

```tsx
<div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
  {/* Content that changes from 1 to 2 to 3 columns based on screen size */}
</div>
```

## Form Handling

Forms in Thesis Grey use Shadcn UI components for improved accessibility and styling:

```tsx
// Form component example
import { Button } from '../../shared/components/ui/button';
import { Input } from '../../shared/components/ui/input';
import { Textarea } from '../../shared/components/ui/textarea';
import { Label } from '../../shared/components/ui/label';

export function CreateSessionForm({ onSubmit }) {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await onSubmit({ name, description });
      setName('');
      setDescription('');
    } catch (error) {
      console.error('Error creating session:', error);
    }
  };
  
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="name">Session Name</Label>
        <Input
          id="name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          required
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="description">Description (optional)</Label>
        <Textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          rows={3}
        />
      </div>
      
      <Button type="submit">
        Create Session
      </Button>
    </form>
  );
}
```
