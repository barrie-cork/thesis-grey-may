---
description: 
globs: 
alwaysApply: false
---
### Common Issues & Import Rules

- **Wasp Imports in `.ts`/`.tsx`:** Always use the `wasp/...` prefix.
  - ✅ `import { useAuth } from 'wasp/client/auth'`
  - ✅ `import type { SearchSession } from 'wasp/entities'` // Types for entities defined in schema.prisma
  - ✅ `import { getSearchSessions, useQuery } from 'wasp/client/operations'`
  - ❌ `import { ... } from '@wasp/...'`
- **Wasp Config Imports in `main.wasp`:** Imports of your code *must* start with `@src/`.
  - ✅ `component: import { LoginPage } from "@src/client/auth/pages/LoginPage"`
  - ❌ `component: import { LoginPage } from "../src/client/auth/pages/LoginPage"`
- **Feature Component Imports:** Use relative paths for imports within the same feature.
- **Wasp Actions Client-Side:** Call actions directly using `async/await`. Avoid `useAction` unless optimistic updates are needed.
  - ✅ `import { createSearchSession } from 'wasp/client/operations'; await createSearchSession({ name, description });`
- **Compilation Errors (`wasp start` / `wasp build`):**
    - **`TS2305: Module '"wasp/entities"' has no exported member '...'` / `TS2307: Cannot find module ...`**: Often caused by:
        - Incorrect import paths (check relative vs. absolute, `wasp/` vs `@src/`).
        - Attempting to import from files/features that were deleted or refactored. Ensure corresponding directories (`src/client/...`, `src/server/...`) and `main.wasp` declarations are removed/updated.
        - Trying to import entities directly from `wasp/entities` that are not defined in `schema.prisma`.
    - **`main.wasp Parse Error`**: Check for syntax errors like missing closing braces `}` or invalid top-level declarations (e.g., `schema prisma { ... }` is **not** allowed in `main.wasp`).
    - **`TSxxxx: Property '...' does not exist on type 'never'` (often on `args` in actions/queries):** Indicates a TS inference failure. Check the operation signature in `src/server/...`. See `3-database-operations.md` for preferred typing methods (`satisfies` vs. explicit `args` typing).
    - **`TS2344: Type '...' does not satisfy constraint 'Payload'/'SuperJSONObject'`**: Operation arguments must be JSON-serializable. Simplify argument types if necessary.

### Feature-Specific Conventions

- **Authentication:** Use the built-in user authentication system (`usernameAndPassword`, etc.). Remember that enabling auth requires specific entities (`User`, `Auth`, `AuthIdentity`, `Session`) defined in `schema.prisma` and a corresponding database migration (`wasp db migrate-dev`). 