---
description: 
globs: 
alwaysApply: false
---
# 2. Thesis Grey Project Conventions and Rules

This document outlines the specific conventions, file structures, and general rules for the Thesis Grey project.

## Quick Reference

### Thesis Grey Architecture

- Vertical slice architecture organized by features:
  - `auth`: Authentication and user management
  - `searchStrategy`: Search session and query management 
  - `serpExecution`: Search API integration
  - `resultsManager`: Results processing and duplicate detection
  - `reviewResults`: Review workflow with tagging
  - `reporting`: PRISMA flow diagrams and exports

### Common Patterns

- Define all entities in `main.wasp`
- Group feature code in:
  - `src/client/{featureName}/pages/`: Page components
  - `src/client/{featureName}/components/`: UI components
  - `src/server/{featureName}/queries.js`: Read operations
  - `src/server/{featureName}/actions.js`: Write operations
- Use Wasp operations (queries/actions) for client-server communication
- **Wasp Imports:** Import from `wasp/...` not `@wasp/...` in `.ts`/`.tsx` files
- Document features in `project_docs/architecture/` for reference

### Common Issues & Import Rules

- **Wasp Imports in `.ts`/`.tsx`:** Always use the `wasp/...` prefix.
  - ✅ `import { useAuth } from 'wasp/client/auth'`
  - ✅ `import type { SearchSession } from 'wasp/entities'`
  - ✅ `import { getSearchSessions, useQuery } from 'wasp/client/operations'`
  - ❌ `import { ... } from '@wasp/...'`
- **Wasp Config Imports in `main.wasp`:** Imports of your code *must* start with `@src/`.
  - ✅ `component: import { LoginPage } from "@src/client/auth/pages/LoginPage"`
  - ❌ `component: import { LoginPage } from "../src/client/auth/pages/LoginPage"`
- **General Imports in `.ts`/`.tsx`:** Use relative paths for imports within the `src/` directory.
  - If you see "Cannot find module '@src/...'": Use a relative path instead.
- **Wasp Actions Client-Side:** Call actions directly using `async/await`. Avoid `useAction` unless optimistic updates are needed.
  - ✅ `import { createSearchSession } from 'wasp/client/operations'; await createSearchSession({ name, description });`

## Rules

### General Rules

- Always reference `main.wasp` as your source of truth for the app's configuration and structure.
- Always reference `project_docs/architecture/` for information on app features and functionality.
- Group feature code into feature directories (e.g., `src/client/searchStrategy`, `src/server/searchStrategy`).
- Use TypeScript for all code (`.ts`/`.tsx`).
- Follow the established feature pattern for new features:
  1. Define entities in `main.wasp`
  2. Add queries/actions in `main.wasp` 
  3. Implement server operations in feature-specific directories
  4. Create UI components in corresponding client directories

### Feature-Specific Conventions

- **Authentication:** Use the built-in user authentication system with usernameAndPassword method
- **Search Strategy:** Implement session and query management with proper user authorization checks
- **SERP Execution:** Use the Google Search API via Serper with proper error handling 
- **Results Manager:** Implement URL normalization and metadata extraction
- **Review Interface:** Build tag management with color coding and note functionality
- **Reporting:** Generate PRISMA flow diagrams and statistics with export options