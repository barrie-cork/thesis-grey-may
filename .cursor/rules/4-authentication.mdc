---
description: 
globs: 
alwaysApply: true
---
# 4. Thesis Grey Authentication

This document details how authentication is implemented and used within the Thesis Grey application.

## Authentication Setup in Thesis Grey

Thesis Grey uses Wasp v0.16.0's built-in username/password authentication system:

```wasp
// In main.wasp
app ThesisGrey {
  // ... other config
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {
        userSignupFields: import { userSignupFields } from "@src/server/auth/userSignupFields.ts"
      }
    },
    onAuthFailedRedirectTo: "/login",
    onBeforeSignup: import { onBeforeSignup } from "@src/server/auth/hooks.ts"
  }
}
```

The Thesis Grey authentication system consists of:

- The `User` entity that stores user information
- Login and signup pages with Wasp's authentication forms
- Custom signup fields handling via `userSignupFields`
- Validation via `onBeforeSignup` hook
- Protected routes through the `authRequired: true` property
- Authorization checks in server operations

## Authentication Implementation

### userSignupFields Implementation

```typescript
// src/server/auth/userSignupFields.ts
import { UserSignupFields } from 'wasp/auth/providers/types';

export const userSignupFields: UserSignupFields = {
  username: async (data: any) => {
    // Ensure username exists and is valid
    if (!data.username) {
      throw new Error('Username is required');
    }
    return data.username;
  },
  role: async (data: any) => {
    // Set default role or validate provided role
    const validRoles = ['Researcher', 'Admin'];
    
    // Default to 'Researcher' if role is empty or not provided
    const role = data.role ? data.role.trim() : 'Researcher';
    
    if (!role) {
      return 'Researcher';
    }
    
    if (!validRoles.includes(role)) {
      throw new Error('Invalid role. Must be one of: ' + validRoles.join(', '));
    }
    
    return role;
  }
};
```

### onBeforeSignup Hook

```typescript
// src/server/auth/hooks.ts
import { OnBeforeSignupHook } from 'wasp/server/auth';

export const onBeforeSignup: OnBeforeSignupHook = async ({ providerId, req, prisma }) => {
  // In Wasp v0.16.0, this hook returns void and is only used for validation or preliminary checks
  console.log('Signup request received for provider ID:', providerId);
  
  // No return value needed (void)
};
```

## Role Configuration

Thesis Grey implements a role-based authorization system with two primary roles:

1. **Researcher** - The default role assigned to regular users
2. **Admin** - Role with elevated privileges for administrative tasks

Role validation is enforced in both the frontend and backend:

- Frontend: The signup form includes a select dropdown with valid role options
- Backend: The `userSignupFields` handler validates that the role is one of the allowed values

### Role Selection in Signup Form

```tsx
// Role selection implemented using a render function for the additionalFields prop
(form, state) => {
  return (
    <FormItemGroup>
      <FormLabel>Role</FormLabel>
      <select
        className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
        defaultValue="Researcher"
        {...form.register('role', { required: 'Role is required' })}
        disabled={state.isLoading}
      >
        <option value="Researcher">Researcher</option>
        <option value="Admin">Admin</option>
      </select>
      {form.formState.errors.role && (
        <FormError>
          {form.formState.errors.role.message as string}
        </FormError>
      )}
    </FormItemGroup>
  );
}
```

## Authentication Pages

### Login Page

```tsx
// src/client/auth/pages/LoginPage.tsx
import React from 'react';
import { LoginForm } from 'wasp/client/auth';
import { Link } from 'react-router-dom';

export function LoginPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Sign in to your account
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Or{' '}
            <Link to="/signup" className="font-medium text-blue-600 hover:text-blue-500">
              create a new account
            </Link>
          </p>
        </div>
        <LoginForm />
      </div>
    </div>
  );
}
```

### Signup Page

```tsx
// src/client/auth/pages/SignupPage.tsx
import React, { useState } from 'react';
import { SignupForm } from 'wasp/client/auth';
import { Link } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '../../shared/components/ui/card';
import { Alert, AlertDescription } from '../../shared/components/ui/alert';
import { useAuth } from 'wasp/client/auth';
import { FormItemGroup, FormLabel, FormError } from 'wasp/client/auth';

export function SignupPage() {
  const { isLoading, error } = useAuth();
  const [formError, setFormError] = useState<string | null>(null);

  return (
    <div className="min-h-screen flex items-center justify-center bg-slate-50 py-12 px-4 sm:px-6 lg:px-8">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">Create a new account</CardTitle>
          <CardDescription className="text-center">
            Fill in the details below to sign up
          </CardDescription>
        </CardHeader>
        <CardContent>
          {(error || formError) && (
            <Alert variant="destructive" className="mb-4">
              <AlertDescription>
                {error ? 'Signup failed. Please check your information and try again.' : formError}
              </AlertDescription>
            </Alert>
          )}
          <SignupForm 
            additionalFields={[
              {
                name: 'username',
                label: 'Username',
                type: 'input',
                validations: {
                  required: 'Username is required'
                }
              },
              // Role selection dropdown
              (form, state) => {
                return (
                  <FormItemGroup>
                    <FormLabel>Role</FormLabel>
                    <select
                      className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                      defaultValue="Researcher"
                      {...form.register('role', { required: 'Role is required' })}
                      disabled={state.isLoading}
                    >
                      <option value="Researcher">Researcher</option>
                      <option value="Admin">Admin</option>
                    </select>
                    {form.formState.errors.role && (
                      <FormError>
                        {form.formState.errors.role.message as string}
                      </FormError>
                    )}
                  </FormItemGroup>
                );
              }
            ]}
          />
        </CardContent>
        <CardFooter className="flex justify-center">
          <p className="text-sm text-gray-600">
            Already have an account?{' '}
            <Link to="/login" className="font-medium text-primary hover:text-primary/80">
              Sign in to your account
            </Link>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
}
```

## Protected Routes

Routes that require authentication in Thesis Grey use the `authRequired` property:

```wasp
// In main.wasp
page SearchStrategyPage {
  authRequired: true,
  component: import { SearchStrategyPage } from "@src/client/searchStrategy/pages/SearchStrategyPage"
}

page SearchExecutionPage {
  authRequired: true,
  component: import { SearchExecutionPage } from "@src/client/serpExecution/pages/SearchExecutionPage"
}

// ... other protected pages
```

## Client-Side Authentication

Thesis Grey uses the `useAuth` hook to access user information in React components:

```tsx
// Example component that uses authentication data
import React from 'react';
import { useAuth, logout } from 'wasp/client/auth';

export function ProfilePage() {
  const { data: user, isLoading, error } = useAuth();
  
  if (isLoading) return <div>Loading...</div>;
  if (error || !user) return <div>Error: {error?.message}</div>;
  
  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded shadow">
      <h1 className="text-2xl font-bold mb-6">Your Profile</h1>
      <div className="mb-4">
        <p className="text-gray-700 mb-2"><strong>Username:</strong> {user.username}</p>
        <p className="text-gray-700 mb-2"><strong>Email:</strong> {user.email}</p>
      </div>
      <button 
        onClick={logout}
        className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
      >
        Logout
      </button>
    </div>
  );
}
```

## Server-Side Authorization

All Thesis Grey operations incorporate consistent authorization checks using the `satisfies` operator for type safety:

```typescript
// Example authorization pattern in operations
import { HttpError } from 'wasp/server';
import { type GetSearchSession } from 'wasp/server/operations';

export const getSearchSession = (async (args, context) => {
  // 1. Check if user is authenticated
  if (!context.user) {
    throw new HttpError(401, "Unauthorized");
  }
  
  try {
    // 2. Fetch the requested resource
    const session = await context.entities.SearchSession.findFirst({
      where: {
        id: args.id,
        userId: context.user.id
      }
    });
    
    // 3. Verify resource exists
    if (!session) {
      throw new HttpError(404, "Search session not found or access denied");
    }
    
    // 4. Proceed with operation
    return session;
  } catch (error) {
    // Re-throw HttpError instances
    if (error instanceof HttpError) {
      throw error;
    }
    
    console.error('Error fetching search session:', error);
    throw new HttpError(500, 'Failed to fetch search session');
  }
}) satisfies GetSearchSession;
```

## Authentication Best Practices in Thesis Grey

1. **Never Skip Auth Checks**: Every server operation must verify authentication and authorization
2. **Protected Routes**: Always use `authRequired: true` for pages that should be accessible only to logged-in users
3. **User-Specific Data**: Always filter queries by the current user's ID to ensure data isolation
4. **Clean Error Messages**: Provide clear but not overly detailed error messages for security
5. **Handle Loading States**: Always handle loading and error states in components using authentication data
6. **Type Safety**: Use the `satisfies` operator to ensure proper typing of server operations
7. **Proper Field Handling**: Use `userSignupFields` to process and validate custom fields during signup
8. **Validation Hooks**: Use `onBeforeSignup` for validation or preliminary checks before user creation
9. **Consistent Role Validation**: Ensure roles are validated both on the client side (dropdown options) and server side (userSignupFields)

These patterns ensure that Thesis Grey maintains a secure authentication model throughout the application.
