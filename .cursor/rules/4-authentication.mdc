---
description: 
globs: 
alwaysApply: true
---
# 4. Thesis Grey Authentication

This document details how authentication is implemented and used within the Thesis Grey application.

## Authentication Setup in Thesis Grey

Thesis Grey uses Wasp v0.16.0's built-in **username/password** authentication system:

```wasp
// In main.wasp
app ThesisGrey {
  // ... other config
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {
        userSignupFields: import { userSignupFields } from "@src/server/auth/userSignupFields.ts"
      }
    },
    onAuthFailedRedirectTo: "/login",
    onBeforeSignup: import { onBeforeSignup } from "@src/server/auth/hooks.ts"
  }
}
```

The Thesis Grey authentication system consists of:

- The `User` entity storing username (required) and email (optional).
- Login and signup pages using standard Wasp authentication forms.
- Custom signup fields handling via `userSignupFields` (primarily for default role setting).
- Validation via `onBeforeSignup` hook (e.g., for username uniqueness if not handled by Wasp).
- Protected routes using the `authRequired: true` property.
- Authorization checks in server operations.

## Authentication Implementation

### userSignupFields Implementation

```typescript
// src/server/auth/userSignupFields.ts
import { UserSignupFields } from 'wasp/auth/providers/types';

export const userSignupFields: UserSignupFields = {
  username: async (data: any) => {
    // Ensure username exists (Wasp also performs uniqueness check)
    if (!data.username) {
      throw new Error('Username is required');
    }
    // Add any other custom username validation here
    return data.username;
  },
  role: async (data: any) => {
    // Always default to Researcher for Phase 1 signup
    // Role selection at signup is removed from the UI
    return 'Researcher'; 
  }
};
```

### onBeforeSignup Hook

```typescript
// src/server/auth/hooks.ts
import { OnBeforeSignupHook } from 'wasp/server/auth';
import { HttpError } from 'wasp/server';

export const onBeforeSignup: OnBeforeSignupHook = async ({ providerId, req, prisma }) => {
  console.log('Signup request received for provider ID:', providerId);

  // Optional: Explicitly check for existing username if needed,
  // though Wasp's core logic should handle this for usernameAndPassword.
  // if (providerId.providerName === 'username' && req.body?.username) {
  //   const username = req.body.username;
  //   const existingUser = await prisma.user.findUnique({ where: { username } });
  //   if (existingUser) {
  //     throw new HttpError(400, 'Validation failed: Username is already in use.');
  //   }
  // }
};
```

## Role Configuration

Phase 1 implements a simplified role system:

1.  **Researcher (Global Role):** Assigned to all users by default upon signup. Stored in `User.role`. Users with this role can create search strategies.
2.  **Admin (Global Role):** Can be manually assigned in the database or potentially via a future admin interface (Phase 2). Admins have elevated privileges.
3.  **Lead Reviewer (Implicit, Session-Specific):** When a user (Researcher or Admin) creates a `SearchSession`, they become the implicit Lead Reviewer for that session, identified by `SearchSession.userId == context.user.id`. Only they can manage/review results for that session in Phase 1.

**Signup Form:**
- The Role dropdown has been **removed** from the signup form for Phase 1.
- All users default to the "Researcher" role upon signup, handled by `userSignupFields.ts`.

## Authentication Pages

### Login Page

```tsx
// src/client/auth/pages/LoginPage.tsx
import React from 'react';
import { LoginForm } from 'wasp/client/auth'; // Uses standard Wasp form
import { Link } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '../../shared/components/ui/card';
import { Alert, AlertDescription } from '../../shared/components/ui/alert';
import { useAuth } from 'wasp/client/auth';

export function LoginPage() {
  const { isLoading, error } = useAuth();
  return (
    <div className="min-h-screen flex items-center justify-center bg-slate-50 py-12 px-4 sm:px-6 lg:px-8">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">Sign in to your account</CardTitle>
          <CardDescription className="text-center">
            Enter your username and password
          </CardDescription>
        </CardHeader>
        <CardContent>
          {(error) && (
            <Alert variant="destructive" className="mb-4">
              <AlertDescription>
                Authentication failed. Please check your credentials.
              </AlertDescription>
            </Alert>
          )}
          <LoginForm />
          {/* Password reset link removed - not available for username/password auth in Phase 1 */}
        </CardContent>
        <CardFooter className="flex justify-center">
          <p className="text-sm text-gray-600">
            Don't have an account?{' '}
            <Link to="/signup" className="font-medium text-primary hover:text-primary/80">
              Create a new account
            </Link>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
}
```

### Signup Page

```tsx
// src/client/auth/pages/SignupPage.tsx
import React, { useState } from 'react';
import { SignupForm } from 'wasp/client/auth'; // Uses standard Wasp form
import { Link } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '../../shared/components/ui/card';
import { Alert, AlertDescription } from '../../shared/components/ui/alert';
import { useAuth } from 'wasp/client/auth';

export function SignupPage() {
  const { isLoading, error } = useAuth();
  return (
    <div className="min-h-screen flex items-center justify-center bg-slate-50 py-12 px-4 sm:px-6 lg:px-8">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">Create a new account</CardTitle>
          <CardDescription className="text-center">
            Fill in the details below to sign up
          </CardDescription>
        </CardHeader>
        <CardContent>
          {(error) && (
            <Alert variant="destructive" className="mb-4">
              <AlertDescription>
                Signup failed. Please check your information and try again.
              </AlertDescription>
            </Alert>
          )}
          <SignupForm 
            additionalFields={[
              // Username field is handled by the standard form
              // We only need to add fields NOT already included by default
              // No additional fields needed for Phase 1 beyond default username/password
            ]}
          />
        </CardContent>
        <CardFooter className="flex justify-center">
          <p className="text-sm text-gray-600">
            Already have an account?{' '}
            <Link to="/login" className="font-medium text-primary hover:text-primary/80">
              Sign in to your account
            </Link>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
}
```

## Protected Routes

Routes that require authentication in Thesis Grey use the `authRequired` property:

```wasp
// In main.wasp
page SearchStrategyPage {
  authRequired: true,
  component: import { SearchStrategyPage } from "@src/client/searchStrategy/pages/SearchStrategyPage"
}

page ProfilePage {
  authRequired: true,
  component: import { ProfilePage } from "@src/client/auth/pages/ProfilePage"
}

// ... other protected pages
```

## Client-Side Authentication

Thesis Grey uses the `useAuth` hook to access user information in React components:

```tsx
// Example component that uses authentication data
import React from 'react';
import { useAuth, logout } from 'wasp/client/auth';

export function ProfilePage() {
  const { data: user, isLoading, error } = useAuth();
  
  if (isLoading) return <div>Loading...</div>;
  if (error || !user) return <div>Error: {error?.message}</div>;
  
  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded shadow">
      <h1 className="text-2xl font-bold mb-6">Your Profile</h1>
      <div className="mb-4">
        <p className="text-gray-700 mb-2"><strong>Username:</strong> {user.username}</p>
        <p className="text-gray-700 mb-2"><strong>Email:</strong> {user.email || 'Not provided'}</p>
        <p className="text-gray-700 mb-2"><strong>Role:</strong> {user.role}</p>
      </div>
      <button 
        onClick={logout}
        className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
      >
        Logout
      </button>
    </div>
  );
}
```

## Server-Side Authorization

All Thesis Grey operations incorporate consistent authorization checks using the `satisfies` operator for type safety:

```typescript
// Example authorization pattern in operations
import { HttpError } from 'wasp/server';
import { type GetSearchSession } from 'wasp/server/operations';
import { ROLES, isSessionOwnerOrAdmin } from '../auth/authorization.js'; // Assuming authorization utils

export const getSearchSession = (async (args, context) => {
  // 1. Check if user is authenticated
  if (!context.user) {
    throw new HttpError(401, "Unauthorized");
  }
  
  try {
    // 2. Fetch the requested resource
    const session = await context.entities.SearchSession.findUnique({
      where: { id: args.id },
    });
    
    // 3. Verify resource exists
    if (!session) {
      throw new HttpError(404, "Search session not found");
    }
    
    // 4. Check if user owns the session (Phase 1 check)
    if (session.userId !== context.user.id) {
       // Optional: Allow Admins access too
       // if (context.user.role !== ROLES.ADMIN) {
           throw new HttpError(403, "Access denied");
       // }
    }
    
    // 5. Proceed with operation
    return session;
  } catch (error) {
    // Re-throw HttpError instances
    if (error instanceof HttpError) {
      throw error;
    }
    
    console.error('Error fetching search session:', error);
    throw new HttpError(500, 'Failed to fetch search session');
  }
}) satisfies GetSearchSession;
```

## Authentication Best Practices in Thesis Grey

1. **Never Skip Auth Checks**: Every server operation must verify authentication and authorization.
2. **Protected Routes**: Always use `authRequired: true` for pages that should be accessible only to logged-in users.
3. **User-Specific Data**: Always filter queries by the current user's ID or check ownership (`session.userId === context.user.id`) before returning/modifying data.
4. **Clean Error Messages**: Provide clear but not overly detailed error messages for security.
5. **Handle Loading States**: Always handle loading and error states in components using authentication data.
6. **Type Safety**: Use the `satisfies` operator to ensure proper typing of server operations.
7. **Default Role Handling**: Use `userSignupFields` to enforce default role assignment during signup.
8. **Consistent Authorization Logic**: Use helper functions (like those in `authorization.js`) for reusable role and ownership checks in server operations.

These patterns ensure that Thesis Grey maintains a secure authentication model throughout the application.
