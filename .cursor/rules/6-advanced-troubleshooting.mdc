---
description: 
globs: 
alwaysApply: false
---
# 6. Advanced Troubleshooting and Integration

This document covers advanced troubleshooting techniques and integration details for the Thesis Grey application.

## Google Search API Integration

### Serper API Setup

- Thesis Grey uses Serper.dev as a proxy for Google Search API
- API key is stored in environment variable `SERPER_API_KEY`
- Configuration is managed in `src/server/serpExecution/services/searchService.js`
- Example API request structure:
  ```javascript
  const response = await fetch('https://google.serper.dev/search', {
    method: 'POST',
    headers: {
      'X-API-KEY': process.env.SERPER_API_KEY,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      q: searchQuery,
      gl: "us",
      hl: "en",
      num: 100
    })
  });
  ```

### Rate Limiting and Error Handling

- Serper imposes rate limits based on your plan
- Implement exponential backoff for retries:
  ```javascript
  const fetchWithRetry = async (url, options, retries = 3, backoff = 300) => {
    try {
      return await fetch(url, options);
    } catch (err) {
      if (retries <= 0) throw err;
      await new Promise(resolve => setTimeout(resolve, backoff));
      return fetchWithRetry(url, options, retries - 1, backoff * 2);
    }
  };
  ```
- Monitor for HTTP 429 (Too Many Requests) responses

## Result Processing and Duplicate Detection

### Duplicate Detection Algorithms

- Thesis Grey uses a combination of approaches for detecting duplicates:
  1. URL normalization and exact matching
  2. Title similarity using Levenshtein distance
  3. Content fingerprinting for similar content with different URLs

- Implementation in `src/server/resultsManager/services/deduplicationService.js`
- Configurable similarity thresholds for fuzzy matching

### Result Processing Pipeline

1. Raw results from API stored in `SearchResult` entity
2. Processing queue handles deduplication and enrichment
3. Final results stored with appropriate metadata and relevance scores

## Performance Optimization Techniques

### Database Query Optimization

- Use Prisma's `select` to limit returned fields:
  ```javascript
  const results = await ctx.entities.SearchResult.findMany({
    where: { searchSessionId },
    select: {
      id: true,
      title: true,
      url: true,
      snippet: true
    }
  });
  ```

- Implement pagination for large result sets:
  ```javascript
  const pageSize = 50;
  const results = await ctx.entities.SearchResult.findMany({
    skip: (page - 1) * pageSize,
    take: pageSize,
    where: { searchSessionId }
  });
  ```

### Background Processing

- Long-running tasks should be handled asynchronously
- Use custom job queue implementation in `src/server/jobs/jobQueue.js`
- Monitor execution with appropriate logging

## Common Troubleshooting Guidance

### API Integration Issues

- **Problem**: Serper API returns error 401
  - **Solution**: Verify API key validity and environment variable setup

- **Problem**: Rate limit exceeded
  - **Solution**: Implement request throttling or upgrade API plan

### Data Processing Problems

- **Problem**: Missing or incomplete search results
  - **Solution**: Check search query formatting and API response parsing

- **Problem**: Excessive duplicates in results
  - **Solution**: Adjust similarity thresholds in deduplication service

### Performance Issues

- **Problem**: Slow search execution
  - **Solution**: Implement caching for common queries and optimize database access

- **Problem**: High memory usage
  - **Solution**: Process results in batches and implement pagination

## Environment Configuration Requirements

### Required Environment Variables

- `DATABASE_URL`: PostgreSQL connection string
- `SERPER_API_KEY`: API key for Serper.dev
- `JWT_SECRET`: Secret for JWT token generation
- `PORT`: Application port (defaults to 3001)

### Development vs. Production Configuration

- Development:
  - `NODE_ENV=development`
  - Set `DEBUG=wasp:*` for enhanced logging

- Production:
  - `NODE_ENV=production`
  - Disable verbose logging
  - Set appropriate database connection pool size

### Monitoring and Logging

- Implement structured logging in production:
  ```javascript
  const logger = {
    info: (msg, meta) => console.log(JSON.stringify({ level: 'info', msg, ...meta })),
    error: (msg, meta) => console.error(JSON.stringify({ level: 'error', msg, ...meta })),
    warn: (msg, meta) => console.warn(JSON.stringify({ level: 'warn', msg, ...meta }))
  };
  ```

- Monitor key performance metrics:
  1. API response times
  2. Database query execution time
  3. Memory usage patterns
  4. Error rates by category
