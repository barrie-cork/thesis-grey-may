{"version":3,"file":"server.js","sources":["../../sdk/wasp/dist/env/validation.js","../../sdk/wasp/dist/server/env.js","../../sdk/wasp/dist/universal/url.js","../../sdk/wasp/dist/server/config.js","../../sdk/wasp/dist/server/dbClient.js","../../sdk/wasp/dist/server/HttpError.js","../../sdk/wasp/dist/server/utils.js","../../sdk/wasp/dist/auth/lucia.js","../../sdk/wasp/dist/auth/password.js","../../sdk/wasp/dist/auth/validation.js","../../sdk/wasp/dist/auth/utils.js","../../sdk/wasp/dist/server/auth/user.js","../../sdk/wasp/dist/auth/session.js","../../sdk/wasp/dist/core/auth.js","../../sdk/wasp/dist/universal/predicates.js","../../sdk/wasp/dist/auth/user.js","../src/middleware/operations.ts","../../../../src/server/serpExecution/actions.js","../src/actions/executeSearchQuery.ts","../src/routes/operations/executeSearchQuery.js","../../../../src/server/resultsManager/actions.js","../src/actions/processSessionResults.ts","../src/routes/operations/processSessionResults.js","../../../../src/server/reviewResults/actions.js","../src/actions/createReviewTag.ts","../src/routes/operations/createReviewTag.js","../src/actions/assignTag.ts","../src/routes/operations/assignTag.js","../src/actions/createNote.ts","../src/routes/operations/createNote.js","../../../../src/server/reporting/actions.js","../src/actions/exportResults.ts","../src/routes/operations/exportResults.js","../../../../src/server/auth/actions.js","../src/actions/updateUserProfile.ts","../src/routes/operations/updateUserProfile.js","../src/actions/changePassword.ts","../src/routes/operations/changePassword.js","../../../../src/server/searchStrategy/actions.js","../src/actions/createSearchSession.ts","../src/routes/operations/createSearchSession.js","../src/actions/createSearchQuery.ts","../src/routes/operations/createSearchQuery.js","../src/actions/updateSearchQuery.ts","../src/routes/operations/updateSearchQuery.js","../../../../src/server/resultsManager/queries.js","../src/queries/getRawResults.ts","../src/routes/operations/getRawResults.js","../src/queries/getProcessedResults.ts","../src/routes/operations/getProcessedResults.js","../../../../src/server/reviewResults/queries.js","../src/queries/getReviewTags.ts","../src/routes/operations/getReviewTags.js","../src/queries/getResultsWithTags.ts","../src/routes/operations/getResultsWithTags.js","../../../../src/server/reporting/queries.js","../src/queries/getReportData.ts","../src/routes/operations/getReportData.js","../../../../src/server/auth/queries.js","../src/queries/getUserProfile.ts","../src/routes/operations/getUserProfile.js","../src/queries/getUserSearchSessions.ts","../src/routes/operations/getUserSearchSessions.js","../../../../src/server/searchStrategy/queries.js","../src/queries/getSearchSessions.ts","../src/routes/operations/getSearchSessions.js","../src/queries/getSearchSession.ts","../src/routes/operations/getSearchSession.js","../src/routes/operations/index.js","../src/middleware/globalMiddleware.ts","../src/routes/auth/me.ts","../src/routes/auth/logout.ts","../../../../src/server/auth/hooks.ts","../src/auth/hooks.ts","../src/auth/providers/username/login.ts","../src/auth/providers/username/signup.ts","../../../../src/server/auth/userSignupFields.ts","../src/auth/providers/config/username.ts","../src/auth/providers/index.ts","../src/routes/auth/index.js","../src/routes/index.js","../src/app.js","../src/polyfill.ts","../src/server.ts"],"sourcesContent":["import * as z from 'zod';\nconst redColor = '\\x1b[31m';\nexport function ensureEnvSchema(data, schema) {\n    try {\n        return schema.parse(data);\n    }\n    catch (e) {\n        if (e instanceof z.ZodError) {\n            const errorOutput = ['', '══ Env vars validation failed ══', ''];\n            for (const error of e.errors) {\n                errorOutput.push(` - ${error.message}`);\n            }\n            errorOutput.push('');\n            errorOutput.push('════════════════════════════════');\n            console.error(redColor, errorOutput.join('\\n'));\n            throw new Error('Error parsing environment variables');\n        }\n        else {\n            throw e;\n        }\n    }\n}\n//# sourceMappingURL=validation.js.map","import * as z from 'zod';\nimport { ensureEnvSchema } from '../env/validation.js';\nconst userServerEnvSchema = z.object({});\nconst waspServerCommonSchema = z.object({\n    PORT: z.coerce.number().default(3001),\n    DATABASE_URL: z.string({\n        required_error: 'DATABASE_URL is required',\n    }),\n    PG_BOSS_NEW_OPTIONS: z.string().optional(),\n    SKIP_EMAIL_VERIFICATION_IN_DEV: z\n        .enum(['true', 'false'], {\n        message: 'SKIP_EMAIL_VERIFICATION_IN_DEV must be either \"true\" or \"false\"',\n    })\n        .transform((value) => value === 'true')\n        .default('false'),\n});\nconst serverUrlSchema = z\n    .string({\n    required_error: 'WASP_SERVER_URL is required',\n})\n    .url({\n    message: 'WASP_SERVER_URL must be a valid URL',\n});\nconst clientUrlSchema = z\n    .string({\n    required_error: 'WASP_WEB_CLIENT_URL is required',\n})\n    .url({\n    message: 'WASP_WEB_CLIENT_URL must be a valid URL',\n});\nconst jwtTokenSchema = z\n    .string({\n    required_error: 'JWT_SECRET is required',\n});\n// In development, we provide default values for some environment variables\n// to make the development process easier.\nconst serverDevSchema = z.object({\n    NODE_ENV: z.literal('development'),\n    WASP_SERVER_URL: serverUrlSchema\n        .default('http://localhost:3001'),\n    WASP_WEB_CLIENT_URL: clientUrlSchema\n        .default('http://localhost:3000/'),\n    JWT_SECRET: jwtTokenSchema\n        .default('DEVJWTSECRET'),\n});\nconst serverProdSchema = z.object({\n    NODE_ENV: z.literal('production'),\n    WASP_SERVER_URL: serverUrlSchema,\n    WASP_WEB_CLIENT_URL: clientUrlSchema,\n    JWT_SECRET: jwtTokenSchema,\n});\nconst serverCommonSchema = userServerEnvSchema.merge(waspServerCommonSchema);\nconst serverEnvSchema = z.discriminatedUnion('NODE_ENV', [\n    serverDevSchema.merge(serverCommonSchema),\n    serverProdSchema.merge(serverCommonSchema)\n]);\n// PUBLIC API\nexport const env = ensureEnvSchema(Object.assign({ NODE_ENV: serverDevSchema.shape.NODE_ENV.value }, process.env), serverEnvSchema);\nfunction getRequiredEnvVarErrorMessage(featureName, envVarName) {\n    return `${envVarName} is required when using ${featureName}`;\n}\n//# sourceMappingURL=env.js.map","export function stripTrailingSlash(url) {\n    return url === null || url === void 0 ? void 0 : url.replace(/\\/$/, \"\");\n}\n//# sourceMappingURL=url.js.map","import { env } from './env.js';\nimport { stripTrailingSlash } from '../universal/url.js';\nconst frontendUrl = stripTrailingSlash(env.WASP_WEB_CLIENT_URL);\nconst serverUrl = stripTrailingSlash(env.WASP_SERVER_URL);\nconst allowedCORSOriginsPerEnv = {\n    development: '*',\n    production: [frontendUrl]\n};\nconst allowedCORSOrigins = allowedCORSOriginsPerEnv[env.NODE_ENV];\nconst config = {\n    frontendUrl,\n    serverUrl,\n    allowedCORSOrigins,\n    env: env.NODE_ENV,\n    isDevelopment: env.NODE_ENV === 'development',\n    port: env.PORT,\n    databaseUrl: env.DATABASE_URL,\n    auth: {\n        jwtSecret: env.JWT_SECRET\n    }\n};\n// PUBLIC API\nexport default config;\n//# sourceMappingURL=config.js.map","import Prisma from '@prisma/client';\nfunction createDbClient() {\n    return new Prisma.PrismaClient();\n}\nconst dbClient = createDbClient();\n// PUBLIC API\nexport default dbClient;\n//# sourceMappingURL=dbClient.js.map","export class HttpError extends Error {\n    constructor(statusCode, message, data, options) {\n        super(message, options);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, HttpError);\n        }\n        this.name = this.constructor.name;\n        if (!(Number.isInteger(statusCode) && statusCode >= 400 && statusCode < 600)) {\n            throw new Error('statusCode has to be integer in range [400, 600).');\n        }\n        this.statusCode = statusCode;\n        if (data) {\n            this.data = data;\n        }\n    }\n}\n//# sourceMappingURL=HttpError.js.map","/**\n * Decorator for async express middleware that handles promise rejections.\n * @param {Func} middleware - Express middleware function.\n * @returns Express middleware that is exactly the same as the given middleware but,\n *   if given middleware returns promise, reject of that promise will be correctly handled,\n *   meaning that error will be forwarded to next().\n */\nexport const handleRejection = (middleware) => async (req, res, next) => {\n    try {\n        await middleware(req, res, next);\n    }\n    catch (error) {\n        next(error);\n    }\n};\nexport const sleep = (ms) => new Promise((r) => setTimeout(r, ms));\nexport function redirect(res, redirectUri) {\n    return res\n        .status(302)\n        .setHeader(\"Location\", redirectUri)\n        .end();\n}\n//# sourceMappingURL=utils.js.map","import { Lucia } from \"lucia\";\nimport { PrismaAdapter } from \"@lucia-auth/adapter-prisma\";\nimport { prisma } from 'wasp/server';\nconst prismaAdapter = new PrismaAdapter(prisma.session, prisma.auth);\n// PRIVATE API\n/**\n * We are using Lucia for session management.\n *\n * Some details:\n * 1. We are using the Prisma adapter for Lucia.\n * 2. We are not using cookies for session management. Instead, we are using\n *    the Authorization header to send the session token.\n * 3. Our `Session` entity is connected to the `Auth` entity.\n * 4. We are exposing the `userId` field from the `Auth` entity to\n *    make fetching the User easier.\n */\nexport const auth = new Lucia(prismaAdapter, {\n    // Since we are not using cookies, we don't need to set any cookie options.\n    // But in the future, if we decide to use cookies, we can set them here.\n    // sessionCookie: {\n    //   name: \"session\",\n    //   expires: true,\n    //   attributes: {\n    //     secure: !config.isDevelopment,\n    //     sameSite: \"lax\",\n    //   },\n    // },\n    getUserAttributes({ userId }) {\n        return {\n            userId,\n        };\n    },\n});\n//# sourceMappingURL=lucia.js.map","import { hash, verify } from \"@node-rs/argon2\";\n// The options are the same as the ones used in the oslo/password library\nconst hashingOptions = {\n    memoryCost: 19456,\n    timeCost: 2,\n    outputLen: 32,\n    parallelism: 1,\n    version: 1 /* Version.V0x13 */,\n};\n// PRIVATE API\nexport async function hashPassword(password) {\n    return hash(normalizePassword(password), hashingOptions);\n}\n// PRIVATE API\nexport async function verifyPassword(hashedPassword, password) {\n    const validPassword = await verify(hashedPassword, normalizePassword(password), hashingOptions);\n    if (!validPassword) {\n        throw new Error(\"Invalid password\");\n    }\n}\n// We are normalising the password to ensure that the password is always hashed in the same way\n// We have the same normalising process as oslo/password did in the past\nfunction normalizePassword(password) {\n    return password.normalize(\"NFKC\");\n}\n//# sourceMappingURL=password.js.map","import { HttpError } from 'wasp/server';\nexport const PASSWORD_FIELD = 'password';\nconst USERNAME_FIELD = 'username';\nconst EMAIL_FIELD = 'email';\nconst TOKEN_FIELD = 'token';\n// PUBLIC API\nexport function ensureValidEmail(args) {\n    validate(args, [\n        { validates: EMAIL_FIELD, message: 'email must be present', validator: email => !!email },\n        { validates: EMAIL_FIELD, message: 'email must be a valid email', validator: email => isValidEmail(email) },\n    ]);\n}\n// PUBLIC API\nexport function ensureValidUsername(args) {\n    validate(args, [\n        { validates: USERNAME_FIELD, message: 'username must be present', validator: username => !!username }\n    ]);\n}\n// PUBLIC API\nexport function ensurePasswordIsPresent(args) {\n    validate(args, [\n        { validates: PASSWORD_FIELD, message: 'password must be present', validator: password => !!password },\n    ]);\n}\n// PUBLIC API\nexport function ensureValidPassword(args) {\n    validate(args, [\n        { validates: PASSWORD_FIELD, message: 'password must be at least 8 characters', validator: password => isMinLength(password, 8) },\n        { validates: PASSWORD_FIELD, message: 'password must contain a number', validator: password => containsNumber(password) },\n    ]);\n}\n// PUBLIC API\nexport function ensureTokenIsPresent(args) {\n    validate(args, [\n        { validates: TOKEN_FIELD, message: 'token must be present', validator: token => !!token },\n    ]);\n}\n// PRIVATE API\nexport function throwValidationError(message) {\n    throw new HttpError(422, 'Validation failed', { message });\n}\nfunction validate(args, validators) {\n    for (const { validates, message, validator } of validators) {\n        if (!validator(args[validates])) {\n            throwValidationError(message);\n        }\n    }\n}\n// NOTE(miho): it would be good to replace our custom validations with e.g. Zod\nconst validEmailRegex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\nfunction isValidEmail(input) {\n    if (typeof input !== 'string') {\n        return false;\n    }\n    return input.match(validEmailRegex) !== null;\n}\nfunction isMinLength(input, minLength) {\n    if (typeof input !== 'string') {\n        return false;\n    }\n    return input.length >= minLength;\n}\nfunction containsNumber(input) {\n    if (typeof input !== 'string') {\n        return false;\n    }\n    return /\\d/.test(input);\n}\n//# sourceMappingURL=validation.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { hashPassword } from './password.js';\nimport { prisma, HttpError } from 'wasp/server';\nimport { sleep } from 'wasp/server/utils';\nimport { Prisma } from '@prisma/client';\nimport { throwValidationError } from './validation.js';\n// PRIVATE API\nexport const contextWithUserEntity = {\n    entities: {\n        User: prisma.user\n    }\n};\n// PRIVATE API\nexport const authConfig = {\n    failureRedirectPath: \"/login\",\n    successRedirectPath: \"/\",\n};\n// PUBLIC API\nexport function createProviderId(providerName, providerUserId) {\n    return {\n        providerName,\n        providerUserId: providerUserId.toLowerCase(),\n    };\n}\n// PUBLIC API\nexport async function findAuthIdentity(providerId) {\n    return prisma.authIdentity.findUnique({\n        where: {\n            providerName_providerUserId: providerId,\n        }\n    });\n}\n// PUBLIC API\n/**\n * Updates the provider data for the given auth identity.\n *\n * This function performs data sanitization and serialization.\n * Sanitization is done by hashing the password, so this function\n * expects the password received in the `providerDataUpdates`\n * **not to be hashed**.\n */\nexport async function updateAuthIdentityProviderData(providerId, existingProviderData, providerDataUpdates) {\n    // We are doing the sanitization here only on updates to avoid\n    // hashing the password multiple times.\n    const sanitizedProviderDataUpdates = await ensurePasswordIsHashed(providerDataUpdates);\n    const newProviderData = Object.assign(Object.assign({}, existingProviderData), sanitizedProviderDataUpdates);\n    const serializedProviderData = await serializeProviderData(newProviderData);\n    return prisma.authIdentity.update({\n        where: {\n            providerName_providerUserId: providerId,\n        },\n        data: { providerData: serializedProviderData },\n    });\n}\n// PRIVATE API\nexport async function findAuthWithUserBy(where) {\n    const result = await prisma.auth.findFirst({ where, include: { user: true } });\n    if (result === null) {\n        return null;\n    }\n    if (result.user === null) {\n        return null;\n    }\n    return Object.assign(Object.assign({}, result), { user: result.user });\n}\n// PUBLIC API\nexport async function createUser(providerId, serializedProviderData, userFields) {\n    return prisma.user.create({\n        data: Object.assign(Object.assign({}, (userFields !== null && userFields !== void 0 ? userFields : {})), { auth: {\n                create: {\n                    identities: {\n                        create: {\n                            providerName: providerId.providerName,\n                            providerUserId: providerId.providerUserId,\n                            providerData: serializedProviderData,\n                        },\n                    },\n                }\n            } }),\n        // We need to include the Auth entity here because we need `authId`\n        // to be able to create a session.\n        include: {\n            auth: true,\n        },\n    });\n}\n// PRIVATE API\nexport async function deleteUserByAuthId(authId) {\n    return prisma.user.deleteMany({ where: { auth: {\n                id: authId,\n            } } });\n}\n// PRIVATE API\n// If an user exists, we don't want to leak information\n// about it. Pretending that we're doing some work\n// will make it harder for an attacker to determine\n// if a user exists or not.\n// NOTE: Attacker measuring time to response can still determine\n// if a user exists or not. We'll be able to avoid it when \n// we implement e-mail sending via jobs.\nexport async function doFakeWork() {\n    const timeToWork = Math.floor(Math.random() * 1000) + 1000;\n    return sleep(timeToWork);\n}\n// PRIVATE API\nexport function rethrowPossibleAuthError(e) {\n    // Prisma code P2002 is for unique constraint violations.\n    if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002') {\n        throw new HttpError(422, 'Save failed', {\n            message: `user with the same identity already exists`,\n        });\n    }\n    if (e instanceof Prisma.PrismaClientValidationError) {\n        // NOTE: Logging the error since this usually means that there are\n        // required fields missing in the request, we want the developer\n        // to know about it.\n        console.error(e);\n        throw new HttpError(422, 'Save failed', {\n            message: 'there was a database error'\n        });\n    }\n    // Prisma code P2021 is for missing table errors.\n    if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2021') {\n        // NOTE: Logging the error since this usually means that the database\n        // migrations weren't run, we want the developer to know about it.\n        console.error(e);\n        console.info('🐝 This error can happen if you did\\'t run the database migrations.');\n        throw new HttpError(500, 'Save failed', {\n            message: `there was a database error`,\n        });\n    }\n    // Prisma code P2003 is for foreign key constraint failure\n    if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2003') {\n        console.error(e);\n        console.info(`🐝 This error can happen if you have some relation on your User entity\n   but you didn't specify the \"onDelete\" behaviour to either \"Cascade\" or \"SetNull\".\n   Read more at: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions`);\n        throw new HttpError(500, 'Save failed', {\n            message: `there was a database error`,\n        });\n    }\n    throw e;\n}\n// PRIVATE API\nexport async function validateAndGetUserFields(data, userSignupFields) {\n    const { password: _password } = data, sanitizedData = __rest(data, [\"password\"]);\n    const result = {};\n    if (!userSignupFields) {\n        return result;\n    }\n    for (const [field, getFieldValue] of Object.entries(userSignupFields)) {\n        try {\n            const value = await getFieldValue(sanitizedData);\n            result[field] = value;\n        }\n        catch (e) {\n            throwValidationError(e.message);\n        }\n    }\n    return result;\n}\n// PUBLIC API\nexport function getProviderData(providerData) {\n    return sanitizeProviderData(getProviderDataWithPassword(providerData));\n}\n// PUBLIC API\nexport function getProviderDataWithPassword(providerData) {\n    // NOTE: We are letting JSON.parse throw an error if the providerData is not valid JSON.\n    return JSON.parse(providerData);\n}\nfunction sanitizeProviderData(providerData) {\n    if (providerDataHasPasswordField(providerData)) {\n        const { hashedPassword } = providerData, rest = __rest(providerData, [\"hashedPassword\"]);\n        return rest;\n    }\n    else {\n        return providerData;\n    }\n}\n// PUBLIC API\nexport async function sanitizeAndSerializeProviderData(providerData) {\n    return serializeProviderData(await ensurePasswordIsHashed(providerData));\n}\nfunction serializeProviderData(providerData) {\n    return JSON.stringify(providerData);\n}\nasync function ensurePasswordIsHashed(providerData) {\n    const data = Object.assign({}, providerData);\n    if (providerDataHasPasswordField(data)) {\n        data.hashedPassword = await hashPassword(data.hashedPassword);\n    }\n    return data;\n}\nfunction providerDataHasPasswordField(providerData) {\n    return 'hashedPassword' in providerData;\n}\n// PRIVATE API\nexport function createInvalidCredentialsError(message) {\n    return new HttpError(401, 'Invalid credentials', { message });\n}\n//# sourceMappingURL=utils.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { getProviderData, } from '../../auth/utils.js';\n// PRIVATE API\nexport function createAuthUserData(user) {\n    const { auth } = user, rest = __rest(user, [\"auth\"]);\n    if (!auth) {\n        throw new Error(`🐝 Error: trying to create a user without auth data.\nThis should never happen, but it did which means there is a bug in the code.`);\n    }\n    const identities = {\n        username: getProviderInfo(auth, 'username'),\n    };\n    return Object.assign(Object.assign({}, rest), { identities });\n}\nfunction getProviderInfo(auth, providerName) {\n    const identity = getIdentity(auth, providerName);\n    if (!identity) {\n        return null;\n    }\n    return Object.assign(Object.assign({}, getProviderData(identity.providerData)), { id: identity.providerUserId });\n}\nfunction getIdentity(auth, providerName) {\n    var _a;\n    return (_a = auth.identities.find((i) => i.providerName === providerName)) !== null && _a !== void 0 ? _a : null;\n}\n//# sourceMappingURL=user.js.map","import { auth } from \"./lucia.js\";\nimport { createInvalidCredentialsError } from \"./utils.js\";\nimport { prisma } from 'wasp/server';\nimport { createAuthUserData } from \"../server/auth/user.js\";\n// PRIVATE API\n// Creates a new session for the `authId` in the database\nexport async function createSession(authId) {\n    return auth.createSession(authId, {});\n}\n// PRIVATE API\nexport async function getSessionAndUserFromBearerToken(req) {\n    const authorizationHeader = req.headers[\"authorization\"];\n    if (typeof authorizationHeader !== \"string\") {\n        return null;\n    }\n    const sessionId = auth.readBearerToken(authorizationHeader);\n    if (!sessionId) {\n        return null;\n    }\n    return getSessionAndUserFromSessionId(sessionId);\n}\n// PRIVATE API\nexport async function getSessionAndUserFromSessionId(sessionId) {\n    const { session, user: authEntity } = await auth.validateSession(sessionId);\n    if (!session || !authEntity) {\n        return null;\n    }\n    return {\n        session,\n        user: await getAuthUserData(authEntity.userId)\n    };\n}\nasync function getAuthUserData(userId) {\n    const user = await prisma.user\n        .findUnique({\n        where: { id: userId },\n        include: {\n            auth: {\n                include: {\n                    identities: true\n                }\n            }\n        }\n    });\n    if (!user) {\n        throw createInvalidCredentialsError();\n    }\n    return createAuthUserData(user);\n}\n// PRIVATE API\nexport function invalidateSession(sessionId) {\n    return auth.invalidateSession(sessionId);\n}\n//# sourceMappingURL=session.js.map","import { handleRejection } from 'wasp/server/utils';\nimport { getSessionAndUserFromBearerToken } from 'wasp/auth/session';\nimport { createInvalidCredentialsError } from 'wasp/auth/utils';\n/**\n * Auth middleware\n *\n * If the request includes an `Authorization` header it will try to authenticate the request,\n * otherwise it will let the request through.\n *\n * - If authentication succeeds it sets `req.sessionId` and `req.user`\n *   - `req.user` is the user that made the request and it's used in\n *      all Wasp features that need to know the user that made the request.\n *   - `req.sessionId` is the ID of the session that authenticated the request.\n * - If the request is not authenticated, it throws an error.\n */\nconst auth = handleRejection(async (req, res, next) => {\n    const authHeader = req.get('Authorization');\n    // NOTE(matija): for now we let tokenless requests through and make it operation's\n    // responsibility to verify whether the request is authenticated or not. In the future\n    // we will develop our own system at Wasp-level for that.\n    if (!authHeader) {\n        req.sessionId = null;\n        req.user = null;\n        return next();\n    }\n    const sessionAndUser = await getSessionAndUserFromBearerToken(req);\n    if (sessionAndUser === null) {\n        throw createInvalidCredentialsError();\n    }\n    req.sessionId = sessionAndUser.session.id;\n    req.user = sessionAndUser.user;\n    next();\n});\nexport default auth;\n//# sourceMappingURL=auth.js.map","export function isNotNull(value) {\n    return value !== null;\n}\n//# sourceMappingURL=predicates.js.map","import { isNotNull } from '../universal/predicates.js';\n/**\n * We split the user.ts code into two files to avoid some server-only\n * code (Oslo's hashing functions) being imported on the client.\n */\n// PUBLIC API\nexport function getEmail(user) {\n    var _a, _b;\n    return (_b = (_a = findUserIdentity(user, \"email\")) === null || _a === void 0 ? void 0 : _a.providerUserId) !== null && _b !== void 0 ? _b : null;\n}\n// PUBLIC API\nexport function getUsername(user) {\n    var _a, _b;\n    return (_b = (_a = findUserIdentity(user, \"username\")) === null || _a === void 0 ? void 0 : _a.providerUserId) !== null && _b !== void 0 ? _b : null;\n}\n// PUBLIC API\nexport function getFirstProviderUserId(user) {\n    var _a;\n    if (!user || !user.auth || !user.auth.identities || user.auth.identities.length === 0) {\n        return null;\n    }\n    return (_a = user.auth.identities[0].providerUserId) !== null && _a !== void 0 ? _a : null;\n}\nexport function makeAuthUserIfPossible(user) {\n    return user ? makeAuthUser(user) : null;\n}\nfunction makeAuthUser(data) {\n    return Object.assign(Object.assign({}, data), { getFirstProviderUserId: () => {\n            const identities = Object.values(data.identities).filter(isNotNull);\n            return identities.length > 0 ? identities[0].id : null;\n        } });\n}\nfunction findUserIdentity(user, providerName) {\n    var _a;\n    if (!user.auth) {\n        return null;\n    }\n    return (_a = user.auth.identities.find((identity) => identity.providerName === providerName)) !== null && _a !== void 0 ? _a : null;\n}\n//# sourceMappingURL=user.js.map","import { \n    deserialize as superjsonDeserialize,\n    serialize as superjsonSerialize,\n} from 'superjson'\nimport { handleRejection } from 'wasp/server/utils'\nimport { makeAuthUserIfPossible } from 'wasp/auth/user'\n\nexport function createOperation (handlerFn) {\n    return handleRejection(async (req, res) => {\n        const args = (req.body && superjsonDeserialize(req.body)) || {}\n        const context = {\n            user: makeAuthUserIfPossible(req.user),\n        }  \n        const result = await handlerFn(args, context)\n        const serializedResult = superjsonSerialize(result)\n        res.json(serializedResult)\n    })\n}\n\nexport function createQuery(handlerFn) {\n    return createOperation(handlerFn)\n}\n\nexport function createAction(handlerFn) {\n    return createOperation(handlerFn)\n}\n","import { HttpError } from \"wasp/server\";\r\nimport axios from \"axios\";\r\n\r\n/**\r\n * Execute a search query using the Google Search API via Serper\r\n */\r\nexport const executeSearchQuery = async ({ queryId, maxResults = 100 }, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, \"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Fetch the query\r\n    const query = await context.entities.SearchQuery.findUnique({\r\n      where: { id: queryId },\r\n      include: { searchSession: true }\r\n    });\r\n    \r\n    if (!query) {\r\n      throw new HttpError(404, \"Query not found\");\r\n    }\r\n\r\n    // Check if the user has access to this query\r\n    if (query.searchSession.userId !== context.user.id) {\r\n      throw new HttpError(403, \"You don't have access to this query\");\r\n    }\r\n    \r\n    // Create execution record\r\n    const execution = await context.entities.SearchExecution.create({\r\n      data: {\r\n        queryId: query.id,\r\n        sessionId: query.searchSession.id,\r\n        status: 'running',\r\n        startTime: new Date()\r\n      }\r\n    });\r\n    \r\n    // Execute search (separate function for cleaner code)\r\n    await executeSearch(context.entities, execution.id, query, maxResults);\r\n    \r\n    return {\r\n      executionId: execution.id,\r\n      queryId: query.id,\r\n      status: 'running',\r\n      startTime: execution.startTime\r\n    };\r\n  } catch (error) {\r\n    // Re-throw HttpError instances\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    console.error('Error executing query:', error);\r\n    throw new HttpError(500, 'An error occurred while executing the search query');\r\n  }\r\n};\r\n\r\n/**\r\n * Execute a search query in the background\r\n */\r\nasync function executeSearch(entities, executionId, query, maxResults) {\r\n  try {\r\n    const serperApiKey = process.env.SERPER_API_KEY;\r\n    if (!serperApiKey) {\r\n      throw new Error('SERPER_API_KEY is not defined');\r\n    }\r\n\r\n    const response = await axios.post('https://google.serper.dev/search', {\r\n      q: query.query,\r\n      num: maxResults\r\n    }, {\r\n      headers: {\r\n        'X-API-KEY': serperApiKey,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    const results = response.data.organic || [];\r\n    \r\n    // Store results\r\n    for (let i = 0; i < results.length; i++) {\r\n      const result = results[i];\r\n      await entities.RawSearchResult.create({\r\n        data: {\r\n          queryId: query.id,\r\n          title: result.title || 'Untitled',\r\n          url: result.link || '',\r\n          snippet: result.snippet || '',\r\n          rank: i + 1,\r\n          searchEngine: 'google',\r\n          rawResponse: result\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Update execution status\r\n    await entities.SearchExecution.update({\r\n      where: { id: executionId },\r\n      data: {\r\n        status: 'completed',\r\n        endTime: new Date(),\r\n        resultCount: results.length\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error in search execution:', error);\r\n    \r\n    // Update execution status\r\n    await entities.SearchExecution.update({\r\n      where: { id: executionId },\r\n      data: {\r\n        status: 'failed',\r\n        endTime: new Date(),\r\n        error: error.message || 'Unknown error occurred'\r\n      }\r\n    });\r\n  }\r\n} ","import { prisma } from 'wasp/server'\n\nimport { executeSearchQuery } from '../../../../../src/server/serpExecution/actions.js'\n\n\nexport default async function (args, context) {\n  return (executeSearchQuery as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchQuery: prisma.searchQuery,\n      SearchSession: prisma.searchSession,\n      SearchExecution: prisma.searchExecution,\n      RawSearchResult: prisma.rawSearchResult,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport executeSearchQuery from '../../actions/executeSearchQuery.js'\n\nexport default createAction(executeSearchQuery)\n","import { HttpError } from \"wasp/server\";\r\n\r\n/**\r\n * Process raw search results into normalized processed results for a session\r\n */\r\nexport const processSessionResults = async ({ sessionId }, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, \"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Validate that the session exists and belongs to the user\r\n    const session = await context.entities.SearchSession.findUnique({\r\n      where: { id: sessionId }\r\n    });\r\n\r\n    if (!session) {\r\n      throw new HttpError(404, \"Search session not found\");\r\n    }\r\n\r\n    if (session.userId !== context.user.id) {\r\n      throw new HttpError(403, \"You don't have access to this session\");\r\n    }\r\n\r\n    // Get raw results that haven't been processed yet\r\n    const rawResults = await context.entities.RawSearchResult.findMany({\r\n      where: {\r\n        searchQuery: { sessionId },\r\n        processedResult: null\r\n      }\r\n    });\r\n\r\n    if (rawResults.length === 0) {\r\n      return { processed: 0, message: \"No new results to process\" };\r\n    }\r\n\r\n    // Track the processed results\r\n    const processedResults = [];\r\n    const duplicateRelationships = [];\r\n\r\n    // Process each raw result\r\n    for (const rawResult of rawResults) {\r\n      // Create a normalized result\r\n      const processedResult = await createProcessedResult(\r\n        context,\r\n        rawResult,\r\n        sessionId\r\n      );\r\n      \r\n      processedResults.push(processedResult);\r\n      \r\n      // Check for duplicates (simple URL-based in Phase 1)\r\n      await findDuplicates(\r\n        context,\r\n        processedResult,\r\n        duplicateRelationships\r\n      );\r\n    }\r\n\r\n    return {\r\n      processed: processedResults.length,\r\n      duplicatesFound: duplicateRelationships.length,\r\n      message: `Processed ${processedResults.length} results with ${duplicateRelationships.length} potential duplicates identified`\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error processing session results:\", error);\r\n    throw new HttpError(500, \"Failed to process session results\");\r\n  }\r\n};\r\n\r\n/**\r\n * Helper function to create a processed result from a raw result\r\n */\r\nasync function createProcessedResult(context, rawResult, sessionId) {\r\n  // Extract basic metadata\r\n  const metadata = {\r\n    domain: extractDomain(rawResult.url),\r\n    fileType: extractFileType(rawResult.url),\r\n    source: rawResult.searchEngine,\r\n    rawRank: rawResult.rank,\r\n    processedAt: new Date().toISOString()\r\n  };\r\n\r\n  // Create processed result\r\n  return await context.entities.ProcessedResult.create({\r\n    data: {\r\n      rawResultId: rawResult.id,\r\n      sessionId,\r\n      title: rawResult.title,\r\n      url: normalizeUrl(rawResult.url),\r\n      snippet: rawResult.snippet,\r\n      metadata\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Helper function to find potential duplicates\r\n */\r\nasync function findDuplicates(context, newResult, duplicateRelationships) {\r\n  // In Phase 1, just do basic URL normalization to find duplicates\r\n  const normalizedUrl = normalizeUrl(newResult.url);\r\n  \r\n  // Find other results with the same normalized URL\r\n  const potentialDuplicates = await context.entities.ProcessedResult.findMany({\r\n    where: {\r\n      url: normalizedUrl,\r\n      id: { not: newResult.id }\r\n    }\r\n  });\r\n\r\n  // For each potential duplicate, create a relationship\r\n  for (const duplicate of potentialDuplicates) {\r\n    const relationship = await context.entities.DuplicateRelationship.create({\r\n      data: {\r\n        primaryResultId: \r\n          duplicate.id < newResult.id ? duplicate.id : newResult.id,\r\n        duplicateResultId: \r\n          duplicate.id < newResult.id ? newResult.id : duplicate.id,\r\n        similarityScore: 1.0,  // Full match based on URL\r\n        duplicateType: 'url_match'\r\n      }\r\n    });\r\n    \r\n    duplicateRelationships.push(relationship);\r\n  }\r\n  \r\n  return duplicateRelationships;\r\n}\r\n\r\n/**\r\n * Helper function to extract domain from URL\r\n */\r\nfunction extractDomain(url) {\r\n  try {\r\n    const domain = new URL(url).hostname;\r\n    return domain;\r\n  } catch (error) {\r\n    return '';\r\n  }\r\n}\r\n\r\n/**\r\n * Helper function to extract file type from URL\r\n */\r\nfunction extractFileType(url) {\r\n  try {\r\n    const path = new URL(url).pathname;\r\n    const extension = path.split('.').pop().toLowerCase();\r\n    \r\n    // Check if it's a known document type\r\n    const documentTypes = ['pdf', 'doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx'];\r\n    if (documentTypes.includes(extension)) {\r\n      return extension;\r\n    }\r\n    \r\n    // Default to 'html' for web pages\r\n    return 'html';\r\n  } catch (error) {\r\n    return 'unknown';\r\n  }\r\n}\r\n\r\n/**\r\n * Helper function to normalize URL for comparison\r\n */\r\nfunction normalizeUrl(url) {\r\n  try {\r\n    // Basic normalization - remove protocol, trailing slash, and www.\r\n    let normalized = url.trim().toLowerCase();\r\n    normalized = normalized.replace(/^https?:\\/\\//, '');\r\n    normalized = normalized.replace(/^www\\./, '');\r\n    normalized = normalized.replace(/\\/$/, '');\r\n    \r\n    return normalized;\r\n  } catch (error) {\r\n    return url;\r\n  }\r\n} ","import { prisma } from 'wasp/server'\n\nimport { processSessionResults } from '../../../../../src/server/resultsManager/actions.js'\n\n\nexport default async function (args, context) {\n  return (processSessionResults as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      RawSearchResult: prisma.rawSearchResult,\n      ProcessedResult: prisma.processedResult,\n      DuplicateRelationship: prisma.duplicateRelationship,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport processSessionResults from '../../actions/processSessionResults.js'\n\nexport default createAction(processSessionResults)\n","import { HttpError } from \"wasp/server\";\r\n\r\n/**\r\n * Create a new review tag\r\n */\r\nexport const createReviewTag = async ({ sessionId, name, color }, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, \"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Validate that the session exists and belongs to the user\r\n    const session = await context.entities.SearchSession.findUnique({\r\n      where: { id: sessionId }\r\n    });\r\n\r\n    if (!session) {\r\n      throw new HttpError(404, \"Search session not found\");\r\n    }\r\n\r\n    if (session.userId !== context.user.id) {\r\n      throw new HttpError(403, \"You don't have access to this session\");\r\n    }\r\n\r\n    // Validate input\r\n    if (!name || !name.trim()) {\r\n      throw new HttpError(400, \"Tag name is required\");\r\n    }\r\n\r\n    if (!color || !color.trim()) {\r\n      throw new HttpError(400, \"Tag color is required\");\r\n    }\r\n\r\n    // Check if a tag with the same name already exists for this session\r\n    const existingTag = await context.entities.ReviewTag.findFirst({\r\n      where: {\r\n        sessionId,\r\n        name: {\r\n          equals: name,\r\n          mode: 'insensitive'\r\n        }\r\n      }\r\n    });\r\n\r\n    if (existingTag) {\r\n      throw new HttpError(400, `A tag with the name \"${name}\" already exists`);\r\n    }\r\n\r\n    // Create the new tag\r\n    return await context.entities.ReviewTag.create({\r\n      data: {\r\n        sessionId,\r\n        name,\r\n        color\r\n      }\r\n    });\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    console.error(\"Error creating review tag:\", error);\r\n    throw new HttpError(500, \"Failed to create review tag\");\r\n  }\r\n};\r\n\r\n/**\r\n * Assign a tag to a result\r\n */\r\nexport const assignTag = async ({ resultId, tagId, remove = false }, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, \"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Get the result and ensure it exists\r\n    const result = await context.entities.ProcessedResult.findUnique({\r\n      where: { id: resultId },\r\n      include: {\r\n        searchSession: true,\r\n        reviewTags: true\r\n      }\r\n    });\r\n\r\n    if (!result) {\r\n      throw new HttpError(404, \"Result not found\");\r\n    }\r\n\r\n    // Check if the user has access to the session\r\n    if (result.searchSession.userId !== context.user.id) {\r\n      throw new HttpError(403, \"You don't have access to this result\");\r\n    }\r\n\r\n    // If removing the tag\r\n    if (remove) {\r\n      const tagAssignment = await context.entities.ReviewTagAssignment.findFirst({\r\n        where: {\r\n          resultId,\r\n          tagId\r\n        }\r\n      });\r\n\r\n      if (!tagAssignment) {\r\n        throw new HttpError(404, \"Tag not assigned to this result\");\r\n      }\r\n\r\n      await context.entities.ReviewTagAssignment.delete({\r\n        where: { id: tagAssignment.id }\r\n      });\r\n\r\n      return { success: true, message: \"Tag removed\" };\r\n    }\r\n\r\n    // If adding the tag, ensure the tag exists and belongs to the same session\r\n    const tag = await context.entities.ReviewTag.findUnique({\r\n      where: { id: tagId }\r\n    });\r\n\r\n    if (!tag) {\r\n      throw new HttpError(404, \"Tag not found\");\r\n    }\r\n\r\n    if (tag.sessionId !== result.searchSession.id) {\r\n      throw new HttpError(400, \"Tag does not belong to the same session as the result\");\r\n    }\r\n\r\n    // Check if the tag is already assigned\r\n    const existingAssignment = result.reviewTags.find(t => t.tagId === tagId);\r\n    \r\n    if (existingAssignment) {\r\n      return { success: true, message: \"Tag already assigned\" };\r\n    }\r\n\r\n    // Assign the tag\r\n    await context.entities.ReviewTagAssignment.create({\r\n      data: {\r\n        resultId,\r\n        tagId\r\n      }\r\n    });\r\n\r\n    return { success: true, message: \"Tag assigned successfully\" };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    console.error(\"Error assigning tag:\", error);\r\n    throw new HttpError(500, \"Failed to assign tag\");\r\n  }\r\n};\r\n\r\n/**\r\n * Create a note for a result\r\n */\r\nexport const createNote = async ({ resultId, content }, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, \"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Validate input\r\n    if (!content || !content.trim()) {\r\n      throw new HttpError(400, \"Note content is required\");\r\n    }\r\n\r\n    // Get the result and ensure it exists\r\n    const result = await context.entities.ProcessedResult.findUnique({\r\n      where: { id: resultId },\r\n      include: {\r\n        searchSession: true\r\n      }\r\n    });\r\n\r\n    if (!result) {\r\n      throw new HttpError(404, \"Result not found\");\r\n    }\r\n\r\n    // Check if the user has access to the session\r\n    if (result.searchSession.userId !== context.user.id) {\r\n      throw new HttpError(403, \"You don't have access to this result\");\r\n    }\r\n\r\n    // Create the note\r\n    return await context.entities.Note.create({\r\n      data: {\r\n        resultId,\r\n        content\r\n      }\r\n    });\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    console.error(\"Error creating note:\", error);\r\n    throw new HttpError(500, \"Failed to create note\");\r\n  }\r\n}; ","import { prisma } from 'wasp/server'\n\nimport { createReviewTag } from '../../../../../src/server/reviewResults/actions.js'\n\n\nexport default async function (args, context) {\n  return (createReviewTag as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      ReviewTag: prisma.reviewTag,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createReviewTag from '../../actions/createReviewTag.js'\n\nexport default createAction(createReviewTag)\n","import { prisma } from 'wasp/server'\n\nimport { assignTag } from '../../../../../src/server/reviewResults/actions.js'\n\n\nexport default async function (args, context) {\n  return (assignTag as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      ProcessedResult: prisma.processedResult,\n      SearchSession: prisma.searchSession,\n      ReviewTagAssignment: prisma.reviewTagAssignment,\n      ReviewTag: prisma.reviewTag,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport assignTag from '../../actions/assignTag.js'\n\nexport default createAction(assignTag)\n","import { prisma } from 'wasp/server'\n\nimport { createNote } from '../../../../../src/server/reviewResults/actions.js'\n\n\nexport default async function (args, context) {\n  return (createNote as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      ProcessedResult: prisma.processedResult,\n      SearchSession: prisma.searchSession,\n      Note: prisma.note,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createNote from '../../actions/createNote.js'\n\nexport default createAction(createNote)\n","import { HttpError } from \"wasp/server\";\r\n\r\n/**\r\n * Export results in a specific format\r\n */\r\nexport const exportResults = async ({ sessionId, format = 'csv', tagId = null }, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, \"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Validate that the session exists and belongs to the user\r\n    const session = await context.entities.SearchSession.findUnique({\r\n      where: { id: sessionId }\r\n    });\r\n\r\n    if (!session) {\r\n      throw new HttpError(404, \"Search session not found\");\r\n    }\r\n\r\n    if (session.userId !== context.user.id) {\r\n      throw new HttpError(403, \"You don't have access to this session\");\r\n    }\r\n\r\n    // Build the query for results\r\n    const where = { sessionId };\r\n    \r\n    // If tagId is provided, filter by that tag\r\n    if (tagId) {\r\n      where.reviewTags = {\r\n        some: {\r\n          tagId\r\n        }\r\n      };\r\n    }\r\n\r\n    // Get the results with their tags and notes\r\n    const results = await context.entities.ProcessedResult.findMany({\r\n      where,\r\n      include: {\r\n        rawSearchResult: {\r\n          select: {\r\n            searchQuery: {\r\n              select: {\r\n                query: true\r\n              }\r\n            },\r\n            rank: true,\r\n            searchEngine: true\r\n          }\r\n        },\r\n        reviewTags: {\r\n          include: {\r\n            tag: true\r\n          }\r\n        },\r\n        notes: true\r\n      }\r\n    });\r\n\r\n    // Format the data for export\r\n    const formattedResults = results.map(result => {\r\n      // Get the tag names\r\n      const tags = result.reviewTags.map(rt => rt.tag.name).join(', ');\r\n      \r\n      // Get the latest note (if any)\r\n      const latestNote = result.notes.sort((a, b) => \r\n        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\r\n      )[0]?.content || '';\r\n\r\n      // Return a formatted object for export\r\n      return {\r\n        title: result.title,\r\n        url: result.url,\r\n        snippet: result.snippet || '',\r\n        query: result.rawSearchResult.searchQuery.query,\r\n        tags,\r\n        notes: latestNote,\r\n        domain: result.metadata.domain || '',\r\n        fileType: result.metadata.fileType || '',\r\n        source: result.rawSearchResult.searchEngine || '',\r\n        rank: result.rawSearchResult.rank\r\n      };\r\n    });\r\n\r\n    // Generate the export content based on the format\r\n    switch (format.toLowerCase()) {\r\n      case 'csv':\r\n        return {\r\n          format: 'csv',\r\n          filename: `thesis-grey-export-${session.name}-${new Date().toISOString().slice(0,10)}.csv`,\r\n          content: generateCSV(formattedResults)\r\n        };\r\n      case 'json':\r\n        return {\r\n          format: 'json',\r\n          filename: `thesis-grey-export-${session.name}-${new Date().toISOString().slice(0,10)}.json`,\r\n          content: JSON.stringify(formattedResults, null, 2)\r\n        };\r\n      default:\r\n        throw new HttpError(400, `Unsupported export format: ${format}`);\r\n    }\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    console.error(\"Error exporting results:\", error);\r\n    throw new HttpError(500, \"Failed to export results\");\r\n  }\r\n};\r\n\r\n/**\r\n * Helper function to generate CSV content\r\n */\r\nfunction generateCSV(data) {\r\n  if (data.length === 0) {\r\n    return '';\r\n  }\r\n\r\n  // Get the headers from the first object\r\n  const headers = Object.keys(data[0]);\r\n  \r\n  // Create the header row\r\n  const headerRow = headers.join(',');\r\n  \r\n  // Create the data rows\r\n  const rows = data.map(item => {\r\n    return headers.map(header => {\r\n      // Handle special characters in CSV\r\n      const value = item[header]?.toString() || '';\r\n      // Escape quotes and wrap in quotes if needed\r\n      if (value.includes(',') || value.includes('\"') || value.includes('\\n')) {\r\n        return `\"${value.replace(/\"/g, '\"\"')}\"`;\r\n      }\r\n      return value;\r\n    }).join(',');\r\n  });\r\n  \r\n  // Combine header and rows\r\n  return [headerRow, ...rows].join('\\n');\r\n} ","import { prisma } from 'wasp/server'\n\nimport { exportResults } from '../../../../../src/server/reporting/actions.js'\n\n\nexport default async function (args, context) {\n  return (exportResults as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      ProcessedResult: prisma.processedResult,\n      RawSearchResult: prisma.rawSearchResult,\n      SearchQuery: prisma.searchQuery,\n      ReviewTagAssignment: prisma.reviewTagAssignment,\n      ReviewTag: prisma.reviewTag,\n      Note: prisma.note,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport exportResults from '../../actions/exportResults.js'\n\nexport default createAction(exportResults)\n","import { HttpError } from 'wasp/server';\r\n\r\nexport const updateUserProfile = async (args, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, 'Not authorized');\r\n  }\r\n\r\n  const { email, role, organizationId } = args;\r\n\r\n  // Validate email format\r\n  if (email && !isValidEmail(email)) {\r\n    throw new HttpError(400, 'Invalid email format');\r\n  }\r\n\r\n  // Check if email is already in use\r\n  if (email) {\r\n    const existingUser = await context.entities.User.findUnique({\r\n      where: { email }\r\n    });\r\n\r\n    if (existingUser && existingUser.id !== context.user.id) {\r\n      throw new HttpError(400, 'Email is already in use');\r\n    }\r\n  }\r\n\r\n  // Prepare update data\r\n  const updateData = {};\r\n  if (email !== undefined) updateData.email = email;\r\n\r\n  // Phase 2 fields - these will be handled in Phase 2\r\n  if (role !== undefined) {\r\n    // In Phase 2, we would check if the user has permission to change roles\r\n    // For now, don't allow role updates\r\n    // updateData.role = role;\r\n  }\r\n\r\n  if (organizationId !== undefined) {\r\n    // In Phase 2, we would validate the organization and user's permission\r\n    // For now, don't allow organization updates\r\n    // updateData.organizationId = organizationId;\r\n  }\r\n\r\n  // Update user profile\r\n  try {\r\n    const updatedUser = await context.entities.User.update({\r\n      where: { id: context.user.id },\r\n      data: updateData,\r\n      select: {\r\n        id: true,\r\n        username: true,\r\n        email: true,\r\n        role: true,\r\n        organizationId: true,\r\n        updatedAt: true\r\n      }\r\n    });\r\n\r\n    return updatedUser;\r\n  } catch (error) {\r\n    console.error('Error updating user profile:', error);\r\n    throw new HttpError(500, 'Failed to update user profile');\r\n  }\r\n};\r\n\r\nexport const changePassword = async (args, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, 'Not authorized');\r\n  }\r\n\r\n  const { currentPassword, newPassword } = args;\r\n\r\n  // Validate password\r\n  if (!newPassword || newPassword.length < 8) {\r\n    throw new HttpError(400, 'New password must be at least 8 characters long');\r\n  }\r\n\r\n  try {\r\n    // Get user with password\r\n    const user = await context.entities.User.findUnique({\r\n      where: { id: context.user.id },\r\n      select: { password: true }\r\n    });\r\n\r\n    // Verify current password\r\n    const passwordValid = await context.auth.verifyPassword(\r\n      currentPassword, \r\n      user.password\r\n    );\r\n\r\n    if (!passwordValid) {\r\n      throw new HttpError(400, 'Current password is incorrect');\r\n    }\r\n\r\n    // Hash new password\r\n    const hashedPassword = await context.auth.hashPassword(newPassword);\r\n\r\n    // Update user password\r\n    await context.entities.User.update({\r\n      where: { id: context.user.id },\r\n      data: { password: hashedPassword }\r\n    });\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    console.error('Error changing password:', error);\r\n    throw new HttpError(500, 'Failed to change password');\r\n  }\r\n};\r\n\r\n// Phase 2 Functions (commented out for now)\r\n/*\r\nexport const assignUserRole = async (args, context) => {\r\n  // This would be implemented in Phase 2\r\n  // It would require admin privileges to change user roles\r\n  if (!context.user || context.user.role !== 'admin') {\r\n    throw new HttpError(403, 'Unauthorized: Requires admin privileges');\r\n  }\r\n\r\n  const { userId, role } = args;\r\n  \r\n  // Validate role\r\n  const validRoles = ['researcher', 'reviewer', 'admin'];\r\n  if (!validRoles.includes(role)) {\r\n    throw new HttpError(400, `Invalid role: must be one of ${validRoles.join(', ')}`);\r\n  }\r\n  \r\n  // Update user role\r\n  try {\r\n    const updatedUser = await context.entities.User.update({\r\n      where: { id: userId },\r\n      data: { role },\r\n      select: {\r\n        id: true,\r\n        username: true,\r\n        role: true\r\n      }\r\n    });\r\n    \r\n    return updatedUser;\r\n  } catch (error) {\r\n    console.error('Error assigning user role:', error);\r\n    throw new HttpError(500, 'Failed to assign user role');\r\n  }\r\n};\r\n*/\r\n\r\n// Helper function to validate email format\r\nfunction isValidEmail(email) {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n} ","import { prisma } from 'wasp/server'\n\nimport { updateUserProfile } from '../../../../../src/server/auth/actions.js'\n\n\nexport default async function (args, context) {\n  return (updateUserProfile as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport updateUserProfile from '../../actions/updateUserProfile.js'\n\nexport default createAction(updateUserProfile)\n","import { prisma } from 'wasp/server'\n\nimport { changePassword } from '../../../../../src/server/auth/actions.js'\n\n\nexport default async function (args, context) {\n  return (changePassword as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport changePassword from '../../actions/changePassword.js'\n\nexport default createAction(changePassword)\n","import { HttpError } from 'wasp/server';\r\n\r\n/**\r\n * Create a new search session\r\n */\r\nexport const createSearchSession = async (args, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, 'Not authorized');\r\n  }\r\n\r\n  const { name, description, teamId } = args;\r\n\r\n  // Validate inputs\r\n  if (!name || name.trim() === '') {\r\n    throw new HttpError(400, 'Name is required');\r\n  }\r\n\r\n  // Data object prepared with Phase 2 in mind\r\n  const data = {\r\n    name,\r\n    description,\r\n    userId: context.user.id\r\n  };\r\n\r\n  // Phase 2 extension point - this will be a no-op in Phase 1\r\n  if (teamId) {\r\n    // In Phase 2, we would validate teamId and team membership here\r\n    data.teamId = teamId;\r\n  }\r\n\r\n  try {\r\n    const newSession = await context.entities.SearchSession.create({\r\n      data,\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        description: true,\r\n        createdAt: true,\r\n        updatedAt: true\r\n      }\r\n    });\r\n\r\n    return newSession;\r\n  } catch (error) {\r\n    console.error('Error creating search session:', error);\r\n    throw new HttpError(500, 'Failed to create search session');\r\n  }\r\n};\r\n\r\n/**\r\n * Create a new search query\r\n */\r\nexport const createSearchQuery = async (args, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, 'Not authorized');\r\n  }\r\n\r\n  const { sessionId, query, description, queryType, structuredData } = args;\r\n\r\n  // Validate inputs\r\n  if (!sessionId) {\r\n    throw new HttpError(400, 'Session ID is required');\r\n  }\r\n  if (!query || query.trim() === '') {\r\n    throw new HttpError(400, 'Query string is required');\r\n  }\r\n\r\n  // Check if session exists and user has access to it\r\n  const session = await context.entities.SearchSession.findFirst({\r\n    where: {\r\n      id: sessionId,\r\n      // This is where we'll add team access in Phase 2\r\n      userId: context.user.id\r\n    }\r\n  });\r\n\r\n  if (!session) {\r\n    throw new HttpError(404, 'Search session not found or access denied');\r\n  }\r\n\r\n  // Data object prepared with Phase 2 in mind\r\n  const data = {\r\n    query,\r\n    description,\r\n    sessionId\r\n  };\r\n\r\n  // Phase 2 extension points\r\n  if (queryType) {\r\n    data.queryType = queryType;\r\n  }\r\n  if (structuredData) {\r\n    data.structuredData = structuredData;\r\n  }\r\n\r\n  try {\r\n    const newQuery = await context.entities.SearchQuery.create({\r\n      data,\r\n      select: {\r\n        id: true,\r\n        query: true,\r\n        description: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n        sessionId: true\r\n      }\r\n    });\r\n\r\n    return newQuery;\r\n  } catch (error) {\r\n    console.error('Error creating search query:', error);\r\n    throw new HttpError(500, 'Failed to create search query');\r\n  }\r\n};\r\n\r\n/**\r\n * Update an existing search query\r\n */\r\nexport const updateSearchQuery = async (args, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, 'Not authorized');\r\n  }\r\n\r\n  const { id, query, description, queryType, structuredData } = args;\r\n\r\n  // Validate inputs\r\n  if (!id) {\r\n    throw new HttpError(400, 'Query ID is required');\r\n  }\r\n\r\n  // Verify ownership of the query\r\n  const existingQuery = await context.entities.SearchQuery.findFirst({\r\n    where: {\r\n      id,\r\n      searchSession: {\r\n        // This is where we'll add team access in Phase 2\r\n        userId: context.user.id\r\n      }\r\n    },\r\n    include: {\r\n      searchSession: true\r\n    }\r\n  });\r\n\r\n  if (!existingQuery) {\r\n    throw new HttpError(404, 'Search query not found or access denied');\r\n  }\r\n\r\n  // Only update provided fields\r\n  const data = {};\r\n  if (query !== undefined) data.query = query;\r\n  if (description !== undefined) data.description = description;\r\n  \r\n  // Phase 2 extension points\r\n  if (queryType !== undefined) data.queryType = queryType;\r\n  if (structuredData !== undefined) data.structuredData = structuredData;\r\n\r\n  try {\r\n    const updatedQuery = await context.entities.SearchQuery.update({\r\n      where: { id },\r\n      data,\r\n      select: {\r\n        id: true,\r\n        query: true,\r\n        description: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n        sessionId: true,\r\n        queryType: true,\r\n        structuredData: true\r\n      }\r\n    });\r\n\r\n    return updatedQuery;\r\n  } catch (error) {\r\n    console.error('Error updating search query:', error);\r\n    throw new HttpError(500, 'Failed to update search query');\r\n  }\r\n}; ","import { prisma } from 'wasp/server'\n\nimport { createSearchSession } from '../../../../../src/server/searchStrategy/actions.js'\n\n\nexport default async function (args, context) {\n  return (createSearchSession as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createSearchSession from '../../actions/createSearchSession.js'\n\nexport default createAction(createSearchSession)\n","import { prisma } from 'wasp/server'\n\nimport { createSearchQuery } from '../../../../../src/server/searchStrategy/actions.js'\n\n\nexport default async function (args, context) {\n  return (createSearchQuery as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      SearchQuery: prisma.searchQuery,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createSearchQuery from '../../actions/createSearchQuery.js'\n\nexport default createAction(createSearchQuery)\n","import { prisma } from 'wasp/server'\n\nimport { updateSearchQuery } from '../../../../../src/server/searchStrategy/actions.js'\n\n\nexport default async function (args, context) {\n  return (updateSearchQuery as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      SearchQuery: prisma.searchQuery,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport updateSearchQuery from '../../actions/updateSearchQuery.js'\n\nexport default createAction(updateSearchQuery)\n","import { HttpError } from \"wasp/server\";\r\n\r\n/**\r\n * Get raw search results for a specific session\r\n */\r\nexport const getRawResults = async ({ sessionId, queryId }, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, \"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Validate that the session exists and belongs to the user\r\n    const session = await context.entities.SearchSession.findUnique({\r\n      where: { id: sessionId }\r\n    });\r\n\r\n    if (!session) {\r\n      throw new HttpError(404, \"Search session not found\");\r\n    }\r\n\r\n    if (session.userId !== context.user.id) {\r\n      throw new HttpError(403, \"You don't have access to this session\");\r\n    }\r\n\r\n    // Build the query\r\n    const where = { searchQuery: { sessionId } };\r\n    \r\n    // If queryId is provided, filter by it\r\n    if (queryId) {\r\n      where.queryId = queryId;\r\n    }\r\n\r\n    // Get raw results\r\n    const rawResults = await context.entities.RawSearchResult.findMany({\r\n      where,\r\n      include: {\r\n        searchQuery: {\r\n          select: {\r\n            query: true,\r\n            description: true\r\n          }\r\n        },\r\n        processedResult: {\r\n          select: {\r\n            id: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: { rank: 'asc' }\r\n    });\r\n\r\n    return rawResults;\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    console.error(\"Error fetching raw results:\", error);\r\n    throw new HttpError(500, \"Failed to fetch raw results\");\r\n  }\r\n};\r\n\r\n/**\r\n * Get processed results for a specific session\r\n */\r\nexport const getProcessedResults = async ({ sessionId, includeTagged = false }, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, \"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Validate that the session exists and belongs to the user\r\n    const session = await context.entities.SearchSession.findUnique({\r\n      where: { id: sessionId }\r\n    });\r\n\r\n    if (!session) {\r\n      throw new HttpError(404, \"Search session not found\");\r\n    }\r\n\r\n    if (session.userId !== context.user.id) {\r\n      throw new HttpError(403, \"You don't have access to this session\");\r\n    }\r\n\r\n    // Build the query\r\n    const where = { sessionId };\r\n    \r\n    // If includeTagged is false, only get results with no tags\r\n    if (!includeTagged) {\r\n      where.reviewTags = { none: {} };\r\n    }\r\n\r\n    // Get processed results\r\n    const processedResults = await context.entities.ProcessedResult.findMany({\r\n      where,\r\n      include: {\r\n        rawSearchResult: {\r\n          select: {\r\n            searchQuery: {\r\n              select: {\r\n                query: true\r\n              }\r\n            },\r\n            rank: true,\r\n            searchEngine: true\r\n          }\r\n        },\r\n        reviewTags: {\r\n          include: {\r\n            tag: true\r\n          }\r\n        },\r\n        notes: {\r\n          orderBy: {\r\n            createdAt: 'desc'\r\n          }\r\n        }\r\n      },\r\n      orderBy: { title: 'asc' }\r\n    });\r\n\r\n    return processedResults;\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    console.error(\"Error fetching processed results:\", error);\r\n    throw new HttpError(500, \"Failed to fetch processed results\");\r\n  }\r\n}; ","import { prisma } from 'wasp/server'\n\nimport { getRawResults } from '../../../../../src/server/resultsManager/queries.js'\n\n\nexport default async function (args, context) {\n  return (getRawResults as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      RawSearchResult: prisma.rawSearchResult,\n      SearchQuery: prisma.searchQuery,\n      ProcessedResult: prisma.processedResult,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getRawResults from '../../queries/getRawResults.js'\n\nexport default createQuery(getRawResults)\n","import { prisma } from 'wasp/server'\n\nimport { getProcessedResults } from '../../../../../src/server/resultsManager/queries.js'\n\n\nexport default async function (args, context) {\n  return (getProcessedResults as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      ProcessedResult: prisma.processedResult,\n      RawSearchResult: prisma.rawSearchResult,\n      SearchQuery: prisma.searchQuery,\n      ReviewTagAssignment: prisma.reviewTagAssignment,\n      ReviewTag: prisma.reviewTag,\n      Note: prisma.note,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getProcessedResults from '../../queries/getProcessedResults.js'\n\nexport default createQuery(getProcessedResults)\n","import { HttpError } from \"wasp/server\";\r\n\r\n/**\r\n * Get all review tags for a specific session\r\n */\r\nexport const getReviewTags = async ({ sessionId }, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, \"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Validate that the session exists and belongs to the user\r\n    const session = await context.entities.SearchSession.findUnique({\r\n      where: { id: sessionId }\r\n    });\r\n\r\n    if (!session) {\r\n      throw new HttpError(404, \"Search session not found\");\r\n    }\r\n\r\n    if (session.userId !== context.user.id) {\r\n      throw new HttpError(403, \"You don't have access to this session\");\r\n    }\r\n\r\n    // Get all tags for this session\r\n    return await context.entities.ReviewTag.findMany({\r\n      where: { sessionId },\r\n      orderBy: { name: 'asc' }\r\n    });\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    console.error(\"Error fetching review tags:\", error);\r\n    throw new HttpError(500, \"Failed to fetch review tags\");\r\n  }\r\n};\r\n\r\n/**\r\n * Get results with their tags for review\r\n */\r\nexport const getResultsWithTags = async ({ \r\n  sessionId, \r\n  tagId = null,\r\n  untaggedOnly = false,\r\n  page = 1,\r\n  limit = 20\r\n}, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, \"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Validate that the session exists and belongs to the user\r\n    const session = await context.entities.SearchSession.findUnique({\r\n      where: { id: sessionId }\r\n    });\r\n\r\n    if (!session) {\r\n      throw new HttpError(404, \"Search session not found\");\r\n    }\r\n\r\n    if (session.userId !== context.user.id) {\r\n      throw new HttpError(403, \"You don't have access to this session\");\r\n    }\r\n\r\n    // Build the where condition based on filters\r\n    const where = { sessionId };\r\n    \r\n    if (tagId) {\r\n      // Filter by specific tag\r\n      where.reviewTags = {\r\n        some: {\r\n          tagId\r\n        }\r\n      };\r\n    } else if (untaggedOnly) {\r\n      // Filter for results with no tags\r\n      where.reviewTags = {\r\n        none: {}\r\n      };\r\n    }\r\n\r\n    // Get total count for pagination\r\n    const totalCount = await context.entities.ProcessedResult.count({ where });\r\n    \r\n    // Fetch results with pagination\r\n    const results = await context.entities.ProcessedResult.findMany({\r\n      where,\r\n      include: {\r\n        reviewTags: {\r\n          include: {\r\n            tag: true\r\n          }\r\n        },\r\n        notes: {\r\n          orderBy: {\r\n            createdAt: 'desc'\r\n          }\r\n        },\r\n        rawSearchResult: {\r\n          select: {\r\n            searchQuery: {\r\n              select: {\r\n                query: true\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      orderBy: { title: 'asc' },\r\n      skip: (page - 1) * limit,\r\n      take: limit\r\n    });\r\n\r\n    return {\r\n      results,\r\n      pagination: {\r\n        totalCount,\r\n        totalPages: Math.ceil(totalCount / limit),\r\n        currentPage: page,\r\n        limit\r\n      }\r\n    };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    console.error(\"Error fetching results with tags:\", error);\r\n    throw new HttpError(500, \"Failed to fetch results\");\r\n  }\r\n}; ","import { prisma } from 'wasp/server'\n\nimport { getReviewTags } from '../../../../../src/server/reviewResults/queries.js'\n\n\nexport default async function (args, context) {\n  return (getReviewTags as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      ReviewTag: prisma.reviewTag,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getReviewTags from '../../queries/getReviewTags.js'\n\nexport default createQuery(getReviewTags)\n","import { prisma } from 'wasp/server'\n\nimport { getResultsWithTags } from '../../../../../src/server/reviewResults/queries.js'\n\n\nexport default async function (args, context) {\n  return (getResultsWithTags as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      ProcessedResult: prisma.processedResult,\n      ReviewTagAssignment: prisma.reviewTagAssignment,\n      ReviewTag: prisma.reviewTag,\n      Note: prisma.note,\n      RawSearchResult: prisma.rawSearchResult,\n      SearchQuery: prisma.searchQuery,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getResultsWithTags from '../../queries/getResultsWithTags.js'\n\nexport default createQuery(getResultsWithTags)\n","import { HttpError } from \"wasp/server\";\r\n\r\n/**\r\n * Get report data for a specific session\r\n */\r\nexport const getReportData = async ({ sessionId }, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, \"Unauthorized\");\r\n  }\r\n\r\n  try {\r\n    // Validate that the session exists and belongs to the user\r\n    const session = await context.entities.SearchSession.findUnique({\r\n      where: { id: sessionId },\r\n      include: {\r\n        searchQueries: true\r\n      }\r\n    });\r\n\r\n    if (!session) {\r\n      throw new HttpError(404, \"Search session not found\");\r\n    }\r\n\r\n    if (session.userId !== context.user.id) {\r\n      throw new HttpError(403, \"You don't have access to this session\");\r\n    }\r\n\r\n    // Get statistics for raw results\r\n    const rawResultsCount = await context.entities.RawSearchResult.count({\r\n      where: {\r\n        searchQuery: {\r\n          sessionId\r\n        }\r\n      }\r\n    });\r\n\r\n    // Get statistics for processed results\r\n    const processedResultsCount = await context.entities.ProcessedResult.count({\r\n      where: { sessionId }\r\n    });\r\n\r\n    // Get all tags for this session\r\n    const tags = await context.entities.ReviewTag.findMany({\r\n      where: { sessionId },\r\n      include: {\r\n        assignments: {\r\n          select: {\r\n            id: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Count of results by tag\r\n    const tagCounts = tags.map(tag => ({\r\n      id: tag.id,\r\n      name: tag.name,\r\n      color: tag.color,\r\n      count: tag.assignments.length\r\n    }));\r\n\r\n    // Count of duplicate relationships\r\n    const duplicatesCount = await context.entities.DuplicateRelationship.count({\r\n      where: {\r\n        OR: [\r\n          { primaryResult: { sessionId } },\r\n          { duplicateResult: { sessionId } }\r\n        ]\r\n      }\r\n    });\r\n\r\n    // Get general tag statistics\r\n    const taggedResultsCount = await context.entities.ProcessedResult.count({\r\n      where: {\r\n        sessionId,\r\n        reviewTags: {\r\n          some: {}\r\n        }\r\n      }\r\n    });\r\n\r\n    const untaggedResultsCount = processedResultsCount - taggedResultsCount;\r\n\r\n    // Get file type statistics\r\n    const fileTypeResults = await context.entities.ProcessedResult.findMany({\r\n      where: { sessionId },\r\n      select: {\r\n        metadata: true\r\n      }\r\n    });\r\n\r\n    const fileTypeCounts = {};\r\n    fileTypeResults.forEach(result => {\r\n      const fileType = result.metadata.fileType || 'unknown';\r\n      fileTypeCounts[fileType] = (fileTypeCounts[fileType] || 0) + 1;\r\n    });\r\n\r\n    return {\r\n      summary: {\r\n        name: session.name,\r\n        description: session.description,\r\n        queriesCount: session.searchQueries.length,\r\n        rawResultsCount,\r\n        processedResultsCount,\r\n        taggedResultsCount,\r\n        untaggedResultsCount,\r\n        duplicatesCount\r\n      },\r\n      queries: session.searchQueries,\r\n      tags: tagCounts,\r\n      fileTypes: Object.entries(fileTypeCounts).map(([type, count]) => ({ type, count }))\r\n    };\r\n  } catch (error) {\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    console.error(\"Error fetching report data:\", error);\r\n    throw new HttpError(500, \"Failed to fetch report data\");\r\n  }\r\n}; ","import { prisma } from 'wasp/server'\n\nimport { getReportData } from '../../../../../src/server/reporting/queries.js'\n\n\nexport default async function (args, context) {\n  return (getReportData as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      SearchQuery: prisma.searchQuery,\n      RawSearchResult: prisma.rawSearchResult,\n      ProcessedResult: prisma.processedResult,\n      ReviewTag: prisma.reviewTag,\n      ReviewTagAssignment: prisma.reviewTagAssignment,\n      DuplicateRelationship: prisma.duplicateRelationship,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getReportData from '../../queries/getReportData.js'\n\nexport default createQuery(getReportData)\n","import { HttpError } from 'wasp/server';\r\n\r\nexport const getUserProfile = async (args, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, 'Not authorized');\r\n  }\r\n\r\n  try {\r\n    const user = await context.entities.User.findUnique({\r\n      where: { id: context.user.id },\r\n      select: {\r\n        id: true,\r\n        username: true,\r\n        email: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n        // Phase 2 fields\r\n        role: true,\r\n        organizationId: true\r\n        // In Phase 2, we would also include organization data:\r\n        // organization: {\r\n        //   select: {\r\n        //     id: true,\r\n        //     name: true\r\n        //   }\r\n        // }\r\n      }\r\n    });\r\n\r\n    if (!user) {\r\n      throw new HttpError(404, 'User not found');\r\n    }\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error('Error fetching user profile:', error);\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    throw new HttpError(500, 'Failed to fetch user profile');\r\n  }\r\n};\r\n\r\nexport const getUserSearchSessions = async (args, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, 'Not authorized');\r\n  }\r\n\r\n  try {\r\n    // Build query with Phase 2 in mind\r\n    const whereClause = { userId: context.user.id };\r\n    \r\n    // In Phase 2, we would also include team-based access\r\n    // if (context.user.role && (context.user.role === 'reviewer' || context.user.role === 'admin')) {\r\n    //   // Allow access to team sessions\r\n    //   whereClause = {\r\n    //     OR: [\r\n    //       { userId: context.user.id },\r\n    //       { team: { members: { some: { userId: context.user.id } } } }\r\n    //     ]\r\n    //   };\r\n    // }\r\n\r\n    // Filter by optional parameters\r\n    if (args?.isTemplate !== undefined) {\r\n      whereClause.isTemplate = args.isTemplate;\r\n    }\r\n\r\n    const sessions = await context.entities.SearchSession.findMany({\r\n      where: whereClause,\r\n      orderBy: { createdAt: 'desc' },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        description: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n        // Phase 2 fields\r\n        teamId: true,\r\n        isTemplate: true,\r\n        _count: {\r\n          select: {\r\n            searchQueries: true,\r\n            processedResults: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return sessions;\r\n  } catch (error) {\r\n    console.error('Error fetching user search sessions:', error);\r\n    throw new HttpError(500, 'Failed to fetch search sessions');\r\n  }\r\n};\r\n\r\n// Phase 2 Functions (commented out for now)\r\n/*\r\nexport const getOrganizationUsers = async (args, context) => {\r\n  // This would be implemented in Phase 2\r\n  // It would require admin or appropriate privileges\r\n  if (!context.user || !context.user.role || !['admin', 'manager'].includes(context.user.role)) {\r\n    throw new HttpError(403, 'Unauthorized: Insufficient privileges');\r\n  }\r\n\r\n  const { organizationId } = args;\r\n  \r\n  if (!organizationId) {\r\n    throw new HttpError(400, 'Organization ID is required');\r\n  }\r\n  \r\n  // Ensure user belongs to the organization\r\n  const userOrg = await context.entities.User.findUnique({\r\n    where: { id: context.user.id },\r\n    select: { organizationId: true }\r\n  });\r\n  \r\n  if (userOrg.organizationId !== organizationId) {\r\n    throw new HttpError(403, 'You do not have access to this organization');\r\n  }\r\n  \r\n  try {\r\n    const users = await context.entities.User.findMany({\r\n      where: { organizationId },\r\n      select: {\r\n        id: true,\r\n        username: true,\r\n        email: true,\r\n        role: true,\r\n        createdAt: true\r\n      },\r\n      orderBy: { username: 'asc' }\r\n    });\r\n    \r\n    return users;\r\n  } catch (error) {\r\n    console.error('Error fetching organization users:', error);\r\n    throw new HttpError(500, 'Failed to fetch organization users');\r\n  }\r\n};\r\n*/ ","import { prisma } from 'wasp/server'\n\nimport { getUserProfile } from '../../../../../src/server/auth/queries.js'\n\n\nexport default async function (args, context) {\n  return (getUserProfile as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getUserProfile from '../../queries/getUserProfile.js'\n\nexport default createQuery(getUserProfile)\n","import { prisma } from 'wasp/server'\n\nimport { getUserSearchSessions } from '../../../../../src/server/auth/queries.js'\n\n\nexport default async function (args, context) {\n  return (getUserSearchSessions as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      SearchQuery: prisma.searchQuery,\n      ProcessedResult: prisma.processedResult,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getUserSearchSessions from '../../queries/getUserSearchSessions.js'\n\nexport default createQuery(getUserSearchSessions)\n","import { HttpError } from 'wasp/server';\r\n\r\n/**\r\n * Get all search sessions for the current user\r\n */\r\nexport const getSearchSessions = async (args, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, 'Not authorized');\r\n  }\r\n\r\n  // Query structure for Phase 1 - simplified\r\n  const whereClause = { userId: context.user.id };\r\n  \r\n  // Phase 2 fields removed to match current schema\r\n  \r\n  try {\r\n    const sessions = await context.entities.SearchSession.findMany({\r\n      where: whereClause,\r\n      orderBy: { createdAt: 'desc' },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        description: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n        // Phase 2 fields removed\r\n        _count: {\r\n          select: {\r\n            searchQueries: true,\r\n            processedResults: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return sessions;\r\n  } catch (error) {\r\n    console.error('Error fetching search sessions:', error);\r\n    throw new HttpError(500, 'Failed to fetch search sessions');\r\n  }\r\n};\r\n\r\n/**\r\n * Get a specific search session by ID\r\n */\r\nexport const getSearchSession = async (args, context) => {\r\n  if (!context.user) {\r\n    throw new HttpError(401, 'Not authorized');\r\n  }\r\n\r\n  const { id } = args;\r\n  if (!id) {\r\n    throw new HttpError(400, 'Session ID is required');\r\n  }\r\n\r\n  try {\r\n    // Build a query that will work with team-based access in Phase 2\r\n    const session = await context.entities.SearchSession.findFirst({\r\n      where: {\r\n        id,\r\n        // This is where we'll add team access check in Phase 2\r\n        userId: context.user.id\r\n      },\r\n      include: {\r\n        searchQueries: {\r\n          orderBy: { createdAt: 'desc' }\r\n        },\r\n        _count: {\r\n          select: {\r\n            searchQueries: true,\r\n            processedResults: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!session) {\r\n      throw new HttpError(404, 'Search session not found or access denied');\r\n    }\r\n\r\n    return session;\r\n  } catch (error) {\r\n    // Re-throw HttpError instances\r\n    if (error instanceof HttpError) {\r\n      throw error;\r\n    }\r\n    \r\n    console.error('Error fetching search session:', error);\r\n    throw new HttpError(500, 'Failed to fetch search session');\r\n  }\r\n}; ","import { prisma } from 'wasp/server'\n\nimport { getSearchSessions } from '../../../../../src/server/searchStrategy/queries.js'\n\n\nexport default async function (args, context) {\n  return (getSearchSessions as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      SearchQuery: prisma.searchQuery,\n      ProcessedResult: prisma.processedResult,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getSearchSessions from '../../queries/getSearchSessions.js'\n\nexport default createQuery(getSearchSessions)\n","import { prisma } from 'wasp/server'\n\nimport { getSearchSession } from '../../../../../src/server/searchStrategy/queries.js'\n\n\nexport default async function (args, context) {\n  return (getSearchSession as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      SearchSession: prisma.searchSession,\n      SearchQuery: prisma.searchQuery,\n      ProcessedResult: prisma.processedResult,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getSearchSession from '../../queries/getSearchSession.js'\n\nexport default createQuery(getSearchSession)\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\n\nimport executeSearchQuery from './executeSearchQuery.js'\nimport processSessionResults from './processSessionResults.js'\nimport createReviewTag from './createReviewTag.js'\nimport assignTag from './assignTag.js'\nimport createNote from './createNote.js'\nimport exportResults from './exportResults.js'\nimport updateUserProfile from './updateUserProfile.js'\nimport changePassword from './changePassword.js'\nimport createSearchSession from './createSearchSession.js'\nimport createSearchQuery from './createSearchQuery.js'\nimport updateSearchQuery from './updateSearchQuery.js'\nimport getRawResults from './getRawResults.js'\nimport getProcessedResults from './getProcessedResults.js'\nimport getReviewTags from './getReviewTags.js'\nimport getResultsWithTags from './getResultsWithTags.js'\nimport getReportData from './getReportData.js'\nimport getUserProfile from './getUserProfile.js'\nimport getUserSearchSessions from './getUserSearchSessions.js'\nimport getSearchSessions from './getSearchSessions.js'\nimport getSearchSession from './getSearchSession.js'\n\nconst router = express.Router()\n\nrouter.post('/execute-search-query', auth, executeSearchQuery)\nrouter.post('/process-session-results', auth, processSessionResults)\nrouter.post('/create-review-tag', auth, createReviewTag)\nrouter.post('/assign-tag', auth, assignTag)\nrouter.post('/create-note', auth, createNote)\nrouter.post('/export-results', auth, exportResults)\nrouter.post('/update-user-profile', auth, updateUserProfile)\nrouter.post('/change-password', auth, changePassword)\nrouter.post('/create-search-session', auth, createSearchSession)\nrouter.post('/create-search-query', auth, createSearchQuery)\nrouter.post('/update-search-query', auth, updateSearchQuery)\nrouter.post('/get-raw-results', auth, getRawResults)\nrouter.post('/get-processed-results', auth, getProcessedResults)\nrouter.post('/get-review-tags', auth, getReviewTags)\nrouter.post('/get-results-with-tags', auth, getResultsWithTags)\nrouter.post('/get-report-data', auth, getReportData)\nrouter.post('/get-user-profile', auth, getUserProfile)\nrouter.post('/get-user-search-sessions', auth, getUserSearchSessions)\nrouter.post('/get-search-sessions', auth, getSearchSessions)\nrouter.post('/get-search-session', auth, getSearchSession)\n\nexport default router\n","import express from 'express'\nimport cookieParser from 'cookie-parser'\nimport logger from 'morgan'\nimport cors from 'cors'\nimport helmet from 'helmet'\n\nimport { config } from 'wasp/server'\nimport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\nexport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\n\nconst _waspGlobalMiddlewareConfigFn = (mc: MiddlewareConfig) => mc\n\n// This is the set of middleware Wasp supplies by default.\n// NOTE: Remember to update the docs of these change.\nconst defaultGlobalMiddlewareConfig: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n\n// This is the global middleware that is the result of applying the user's modifications.\n// It will be used as the basis for Operations and APIs (unless they are further customized).\nconst globalMiddlewareConfig: MiddlewareConfig = _waspGlobalMiddlewareConfigFn(defaultGlobalMiddlewareConfig)\n\n// This function returns an array of Express middleware to be used by a router. It optionally\n// accepts a function that can modify the global middleware for specific route customization.\nexport function globalMiddlewareConfigForExpress(middlewareConfigFn?: MiddlewareConfigFn): express.RequestHandler[] {\n  if (!middlewareConfigFn) {\n    return Array.from(globalMiddlewareConfig.values())\n  }\n\n  // Make a clone so they can't mess up the global Map for any other routes calling this.\n  const globalMiddlewareConfigClone = new Map(globalMiddlewareConfig)\n  const modifiedMiddlewareConfig = middlewareConfigFn(globalMiddlewareConfigClone)\n  return Array.from(modifiedMiddlewareConfig.values())\n}\n","import { serialize as superjsonSerialize } from 'superjson'\nimport { handleRejection } from 'wasp/server/utils'\nimport { createInvalidCredentialsError } from 'wasp/auth/utils'\n\nexport default handleRejection(async (req, res) => {\n  if (req.user) {\n    return res.json(superjsonSerialize(req.user))\n  } else {\n    throw createInvalidCredentialsError()\n  }\n})\n","import { handleRejection } from 'wasp/server/utils'\nimport { createInvalidCredentialsError } from 'wasp/auth/utils'\nimport { invalidateSession } from 'wasp/auth/session'\n\nexport default handleRejection(async (req, res) => {\n  if (req.sessionId) {\n    await invalidateSession(req.sessionId)\n    return res.json({ success: true })\n  } else {\n    throw createInvalidCredentialsError()\n  }\n})\n","import { OnBeforeSignupHook } from 'wasp/server/auth';\n\nexport const onBeforeSignup: OnBeforeSignupHook = async ({ providerId, req, prisma }) => {\n  // In Wasp 0.16.0, we can't modify the data in this hook\n  // It should just perform validation or preliminary checks\n  console.log('Signup request received for provider ID:', providerId);\n  \n  // No return value needed (void)\n}; ","import { prisma } from 'wasp/server'\nimport type {\n  OnAfterSignupHook,\n  OnBeforeOAuthRedirectHook,\n  OnBeforeSignupHook,\n  OnBeforeLoginHook,\n  OnAfterLoginHook,\n  InternalAuthHookParams,\n} from 'wasp/server/auth'\nimport { onBeforeSignup as onBeforeSignupHook_ext } from '../../../../../src/server/auth/hooks.ts'\n\n/*\n  These are \"internal hook functions\" based on the user defined hook functions.\n\n  In the server code (e.g. email signup) we import these functions and call them.\n\n  We want to pass extra params to the user defined hook functions, but we don't want to\n  pass them when we call them in the server code.\n*/\n\nexport const onBeforeSignupHook: InternalFunctionForHook<OnBeforeSignupHook> = (params) =>\n  onBeforeSignupHook_ext({\n    prisma,\n    ...params,\n  })\n\n/**\n * This is a no-op function since the user didn't define the onAfterSignup hook.\n */\nexport const onAfterSignupHook: InternalFunctionForHook<OnAfterSignupHook> = async (_params) => {}\n\n/**\n * This is an identity function since the user didn't define the onBeforeOAuthRedirect hook.\n */\nexport const onBeforeOAuthRedirectHook: InternalFunctionForHook<OnBeforeOAuthRedirectHook> = async (params) => params\n\n\n/**\n * This is a no-op function since the user didn't define the onBeforeLogin hook.\n */\nexport const onBeforeLoginHook: InternalFunctionForHook<OnBeforeLoginHook> = async (_params) => {}\n\n/**\n * This is a no-op function since the user didn't define the onAfterLogin hook.\n */\nexport const onAfterLoginHook: InternalFunctionForHook<OnAfterLoginHook> = async (_params) => {}\n\n/*\n  We pass extra params to the user defined hook functions, but we don't want to\n  pass the extra params (e.g. 'prisma') when we call the hooks in the server code.\n  So, we need to remove the extra params from the params object which is used to define the\n  internal hook functions.\n*/\ntype InternalFunctionForHook<Fn extends (args: never) => unknown | Promise<unknown>> = Fn extends (\n  params: infer P,\n) => infer R\n  ? (args: Omit<P, keyof InternalAuthHookParams>) => R\n  : never\n","import { createInvalidCredentialsError } from 'wasp/auth/utils'\nimport { handleRejection } from 'wasp/server/utils'\nimport { verifyPassword } from 'wasp/auth/password'\n\nimport {\n  createProviderId,\n  findAuthIdentity,\n  findAuthWithUserBy,\n  getProviderDataWithPassword,\n} from 'wasp/auth/utils'\nimport { createSession } from 'wasp/auth/session'\nimport { ensureValidUsername, ensurePasswordIsPresent } from 'wasp/auth/validation'\nimport { onBeforeLoginHook, onAfterLoginHook } from '../../hooks.js';\n\nexport default handleRejection(async (req, res) => {\n  const fields = req.body ?? {}\n  ensureValidArgs(fields)\n\n  const providerId = createProviderId('username', fields.username)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n    throw createInvalidCredentialsError()\n  }\n\n  try {\n    const providerData = getProviderDataWithPassword<'username'>(authIdentity.providerData)\n\n    await verifyPassword(providerData.hashedPassword, fields.password)\n  } catch(e) {\n    throw createInvalidCredentialsError()\n  }\n\n  const auth = await findAuthWithUserBy({\n    id: authIdentity.authId\n  }) \n\n  if (auth === null) {\n    throw createInvalidCredentialsError()\n  }\n\n  await onBeforeLoginHook({\n      req,\n      providerId,\n      user: auth.user,\n  })\n\n  const session = await createSession(auth.id)\n\n  await onAfterLoginHook({\n    req,\n    providerId,\n    user: auth.user,\n  })\n\n  return res.json({\n      sessionId: session.id,\n  })\n})\n\nfunction ensureValidArgs(args: object): void {\n  ensureValidUsername(args);\n  ensurePasswordIsPresent(args);\n}\n","import { handleRejection } from 'wasp/server/utils'\nimport {\n  createProviderId,\n  createUser,\n  rethrowPossibleAuthError,\n  sanitizeAndSerializeProviderData,\n} from 'wasp/auth/utils'\nimport {\n  ensureValidUsername,\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n} from 'wasp/auth/validation'\nimport { validateAndGetUserFields } from 'wasp/auth/utils'\nimport { type UserSignupFields } from 'wasp/auth/providers/types'\nimport { onBeforeSignupHook, onAfterSignupHook } from '../../hooks.js';\n\nexport function getSignupRoute({\n  userSignupFields,\n}: {\n  userSignupFields?: UserSignupFields;\n}) {\n  return handleRejection(async function signup(req, res) {\n    const fields = req.body ?? {}\n    ensureValidArgs(fields)\n  \n    const userFields = await validateAndGetUserFields(\n      fields,\n      userSignupFields,\n    );\n  \n    const providerId = createProviderId('username', fields.username)\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: fields.password,\n    })\n  \n    try {\n      await onBeforeSignupHook({ req, providerId })\n      const user = await createUser(\n        providerId,\n        providerData,\n        // Using any here because we want to avoid TypeScript errors and\n        // rely on Prisma to validate the data.\n        userFields as any\n      )\n      await onAfterSignupHook({ req, providerId, user })\n    } catch (e: unknown) {\n      rethrowPossibleAuthError(e)\n    }\n  \n    return res.json({ success: true })\n  })\n}\n\nfunction ensureValidArgs(args: object): void {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n}\n","import { UserSignupFields } from 'wasp/auth/providers/types';\n\nexport const userSignupFields: UserSignupFields = {\n  username: async (data: any) => {\n    // Ensure username exists and is unique\n    if (!data.username) {\n      throw new Error('Username is required');\n    }\n    return data.username;\n  }\n}; ","\nimport { Router } from \"express\";\n\nimport login from \"../username/login.js\";\nimport { getSignupRoute } from \"../username/signup.js\";\nimport { ProviderConfig } from \"wasp/auth/providers/types\";\n\nimport { userSignupFields } from '../../../../../../../src/server/auth/userSignupFields.ts'\nconst _waspUserSignupFields = userSignupFields\n\nconst config: ProviderConfig = {\n    id: \"username\",\n    displayName: \"Username and password\",\n    createRouter() {\n        const router = Router();\n\n        router.post('/login', login);\n        const signupRoute = getSignupRoute({\n            userSignupFields: _waspUserSignupFields,\n        });\n        router.post('/signup', signupRoute);\n\n        return router;\n    },\n}\n\nexport default config;\n","import { Router } from \"express\";\n\nimport username from './config/username.js'\n\nconst providers = [\n  username,\n];\n\nconst router = Router();\n\n\nfor (const provider of providers) {\n  const { createRouter } = provider;\n  const providerRouter = createRouter(provider);\n  router.use(`/${provider.id}`, providerRouter);\n  console.log(`🚀 \"${provider.displayName}\" auth initialized`);\n}\n\nexport default router;\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\nimport me from './me.js'\nimport logout from './logout.js'\n\nimport providersRouter from '../../auth/providers/index.js'\n\nconst router = express.Router()\n\nrouter.get('/me', auth, me)\nrouter.post('/logout', auth, logout)\nrouter.use('/', providersRouter)\n\nexport default router\n","import express from 'express'\nimport operations from './operations/index.js'\nimport { globalMiddlewareConfigForExpress } from '../middleware/index.js'\nimport auth from './auth/index.js'\n\n\nconst router = express.Router()\nconst middleware = globalMiddlewareConfigForExpress()\n\nrouter.get('/', middleware, function (_req, res) {\n  res.status(200).send();\n})\n\nrouter.use('/auth', middleware, auth)\nrouter.use('/operations', middleware, operations)\n\nexport default router\n","import express from 'express'\n\nimport { HttpError } from 'wasp/server'\nimport indexRouter from './routes/index.js'\n\n// TODO: Consider extracting most of this logic into createApp(routes, path) function so that\n//   it can be used in unit tests to test each route individually.\n\nconst app = express()\n\n// NOTE: Middleware are installed on a per-router or per-route basis.\n\napp.use('/', indexRouter)\n\n// Custom error handler.\napp.use((err, _req, res, next) => {\n  // As by expressjs documentation, when the headers have already\n  // been sent to the client, we must delegate to the default error handler.\n  if (res.headersSent) { return next(err) }\n\n  if (err instanceof HttpError) {\n    return res.status(err.statusCode).json({ message: err.message, data: err.data })\n  }\n\n  // This forwards the error to the default express error handler.\n  // As described by expressjs documentation, the default error handler sets response status\n  // to err.status or err.statusCode if it is 4xx or 5xx, and if not, sets it to 500.\n  // It won't add any more info to it if server is running in production, which is exactly what we want,\n  // we want to share as little info as possible when error happens in production, for security reasons,\n  // so they will get only status code if set, or 500 if not, no extra info.\n  // In development it will also share the error stack though, which is useful.\n  // If the user wants to put more information about the error into the response, they should use HttpError.\n  return next(err)\n})\n\nexport default app\n","// This is a polyfill for Node.js 18 webcrypto API so Lucia can use it\n// for random number generation.\n\nimport { webcrypto } from 'node:crypto'\n\n// NOTE: node < 19 doesn't have Crypto API, which we need for Lucia, so we apply the polyfill if Crypto API is not defined.\nif (typeof globalThis.crypto === 'undefined') {\n  // @ts-ignore\n  globalThis.crypto = webcrypto as Crypto\n}\n","import http from 'http'\n\nimport app from './app.js'\nimport { config } from 'wasp/server'\n\n\n\n\nimport './polyfill.js'\n\nconst startServer = async () => {\n\n  const port = normalizePort(config.port)\n  app.set('port', port)\n\n  const server = http.createServer(app)\n\n\n\n  server.listen(port)\n\n  server.on('error', (error: NodeJS.ErrnoException) => {\n    if (error.syscall !== 'listen') throw error\n    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges')\n      process.exit(1)\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use')\n      process.exit(1)\n    default:\n      throw error\n    }\n  })\n\n  server.on('listening', () => {\n    const addr = server.address()\n    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port\n    console.log('Server listening on ' + bind)\n  })\n}\n\nstartServer().catch(e => console.error(e))\n\n/**\n * Normalize a port into a number, string, or false.\n */\nfunction normalizePort (val) {\n  const port = parseInt(val, 10)\n  if (isNaN(port)) return val // named pipe\n  if (port >= 0) return port // port number\n  return false\n}\n"],"names":["config","prisma","auth","__rest","Prisma","superjsonDeserialize","superjsonSerialize","executeSearchQuery","processSessionResults","createReviewTag","assignTag","createNote","exportResults","updateUserProfile","changePassword","createSearchSession","createSearchQuery","updateSearchQuery","getRawResults","getProcessedResults","getReviewTags","getResultsWithTags","getReportData","getUserProfile","getUserSearchSessions","getSearchSessions","getSearchSession","router","onBeforeSignupHook_ext","ensureValidArgs","username","providersRouter","operations","indexRouter"],"mappings":"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"}