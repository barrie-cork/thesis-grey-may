// Basic App Configuration
app ThesisGrey {
  title: "Thesis Grey", // Updated title
  wasp: { version: "^0.16.0" },
  auth: {
    userEntity: User, // This User refers to the one in schema.prisma
    methods: {
      email: {
        userSignupFields: import { userSignupFields } from "@src/server/auth/userSignupFields.ts",
        fromField: {
          name: "Thesis Grey",
          email: "noreply@thesis-grey.app"
        },
        // For Phase 1, we'll include basic email verification and password reset
        emailVerification: {
          clientRoute: EmailVerificationRoute
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/server/auth/emailContent.ts"
        }
      }
    },
    onAuthFailedRedirectTo: "/login",
    onBeforeSignup: import { onBeforeSignup } from "@src/server/auth/hooks.ts",
  },
  // Email sender configuration at the app level
  emailSender: {
    provider: Dummy
  }
}

// --- Core Entities --- 
// REMOVED - Entities are now defined in schema.prisma

// --- Basic Routes & Pages --- 

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/client/auth/pages/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/client/auth/pages/SignupPage"
}

// Email verification and password reset routes
route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerificationPage } from "@src/client/auth/pages/EmailVerificationPage"
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordResetPage } from "@src/client/auth/pages/PasswordResetPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordResetPage } from "@src/client/auth/pages/RequestPasswordResetPage"
}

// REMOVED Simple Query & Action
// query getTasks {
//   fn: import { getTasks } from "@src/server/tasks/queries.ts",
//   // Entities listed here are for context injection, NOT definition
//   entities: [Task, User]
// }
//


// --- Profile Page ---
route ProfileRoute { path: "/profile", to: ProfilePage }
page ProfilePage {
  component: import { ProfilePage } from "@src/client/auth/pages/ProfilePage",
  authRequired: true
}

// --- SERP Execution ---
route SearchExecutionRoute { path: "/execute-search", to: SearchExecutionPage }
page SearchExecutionPage {
  component: import { SearchExecutionPage } from "@src/client/serpExecution/pages/SearchExecutionPage",
  authRequired: true
}

action executeSearchQuery {
  fn: import { executeSearchQuery } from "@src/server/serpExecution/actions.js",
  entities: [User, SearchQuery, SearchSession, SearchExecution, RawSearchResult] // Updated entities
}

// --- Results Manager ---
route ResultsManagerRoute { path: "/results", to: ResultsManagerPage }
page ResultsManagerPage {
  component: import { ResultsManagerPage } from "@src/client/resultsManager/pages/ResultsManagerPage",
  authRequired: true
}

query getRawResults {
  fn: import { getRawResults } from "@src/server/resultsManager/queries.js",
  entities: [User, SearchSession, RawSearchResult, SearchQuery, ProcessedResult]
}

query getProcessedResults {
  fn: import { getProcessedResults } from "@src/server/resultsManager/queries.js",
  entities: [User, SearchSession, ProcessedResult, RawSearchResult, SearchQuery, ReviewTagAssignment, ReviewTag, Note]
}

action processSessionResults {
  fn: import { processSessionResults } from "@src/server/resultsManager/actions.js",
  entities: [User, SearchSession, RawSearchResult, ProcessedResult, DuplicateRelationship]
}

// --- Review Results ---
route ReviewRoute { path: "/review", to: ReviewPage }
page ReviewPage {
  component: import { ReviewPage } from "@src/client/reviewResults/pages/ReviewPage",
  authRequired: true
}

query getReviewTags {
  fn: import { getReviewTags } from "@src/server/reviewResults/queries.js",
  entities: [User, SearchSession, ReviewTag]
}

query getResultsWithTags {
  fn: import { getResultsWithTags } from "@src/server/reviewResults/queries.js",
  entities: [User, SearchSession, ProcessedResult, ReviewTagAssignment, ReviewTag, Note, RawSearchResult, SearchQuery]
}

action createReviewTag {
  fn: import { createReviewTag } from "@src/server/reviewResults/actions.js",
  entities: [User, SearchSession, ReviewTag]
}

action assignTag {
  fn: import { assignTag } from "@src/server/reviewResults/actions.js",
  entities: [User, ProcessedResult, SearchSession, ReviewTagAssignment, ReviewTag]
}

action createNote {
  fn: import { createNote } from "@src/server/reviewResults/actions.js",
  entities: [User, ProcessedResult, SearchSession, Note]
}

// --- Reporting ---
route ReportingRoute { path: "/reporting", to: ReportingPage }
page ReportingPage {
  component: import { ReportingPage } from "@src/client/reporting/pages/ReportingPage",
  authRequired: true
}

query getReportData {
  fn: import { getReportData } from "@src/server/reporting/queries.js",
  entities: [User, SearchSession, SearchQuery, RawSearchResult, ProcessedResult, ReviewTag, ReviewTagAssignment, DuplicateRelationship]
}

action exportResults {
  fn: import { exportResults } from "@src/server/reporting/actions.js",
  entities: [User, SearchSession, ProcessedResult, RawSearchResult, SearchQuery, ReviewTagAssignment, ReviewTag, Note]
}

// --- Auth Operations (beyond login/signup) ---
query getUserProfile {
  fn: import { getUserProfile } from "@src/server/auth/queries.js",
  entities: [User] // Updated entities
}

query getUserSearchSessions {
  fn: import { getUserSearchSessions } from "@src/server/auth/queries.js",
  entities: [User, SearchSession, SearchQuery, ProcessedResult] // Updated entities
}

/* // Commented out - Phase 2 function
query getOrganizationUsers {
  fn: import { getOrganizationUsers } from "@src/server/auth/queries.js",
  entities: [User] // Placeholder entities
}
*/

action updateUserProfile {
  fn: import { updateUserProfile } from "@src/server/auth/actions.js",
  entities: [User] // Updated entities
}

action changePassword {
  fn: import { changePassword } from "@src/server/auth/actions.js",
  entities: [User] // Updated entities
}

/* // Commented out - Phase 2 function
action assignUserRole {
  fn: import { assignUserRole } from "@src/server/auth/actions.js",
  entities: [User] // Placeholder entities
}
*/

// --- Search Strategy Feature ---
route SearchStrategyRoute { path: "/", to: SearchStrategyPage }
page SearchStrategyPage {
  component: import { SearchStrategyPage } from "@src/client/searchStrategy/pages/SearchStrategyPage",
  authRequired: true
}

query getSearchSessions {
  fn: import { getSearchSessions } from "@src/server/searchStrategy/queries.js",
  entities: [User, SearchSession, SearchQuery, ProcessedResult]
}

action createSearchSession {
  fn: import { createSearchSession } from "@src/server/searchStrategy/actions.js",
  entities: [User, SearchSession]
}

query getSearchSession {
  fn: import { getSearchSession } from "@src/server/searchStrategy/queries.js",
  entities: [User, SearchSession, SearchQuery, ProcessedResult]
}

action createSearchQuery {
  fn: import { createSearchQuery } from "@src/server/searchStrategy/actions.js",
  entities: [User, SearchSession, SearchQuery]
}

action updateSearchQuery {
  fn: import { updateSearchQuery } from "@src/server/searchStrategy/actions.js",
  entities: [User, SearchSession, SearchQuery]
}

// (e.g., routes, pages, queries, actions for resultsManager, etc.)
