// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================
// User Model (Auth models are added by Wasp)
// ==============================================

model User {
  id                 String            @id @default(uuid())
  username           String            @unique // Added back for username/password auth
  email              String?           @unique // Made optional again
  password           String?           // Added by Wasp for username/password auth
  isEmailVerified    Boolean?          // Added by Wasp for email auth (can be removed if unused)
  role               String            @default("Researcher") // Role-based authorization
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  searchSessions     SearchSession[]
  reviewAssignments  ReviewAssignment[] // Added by user schema
  sessionMemberships SessionMembership[] // Relation to session memberships

  // Add any other custom fields here
}

// ==============================================
// Thesis Grey Application Models
// ==============================================

model SearchSession {
  id                String            @id @default(uuid())
  name              String
  description       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String            // Creator of the session (Implicit Lead Reviewer in Phase 1)
  user              User              @relation(fields: [userId], references: [id])
  searchQueries     SearchQuery[]
  searchExecutions  SearchExecution[]
  processedResults  ProcessedResult[]
  reviewTags        ReviewTag[]
  members           SessionMembership[] // Relation to session members (for Phase 2)
}

model SearchQuery {
  id                String            @id @default(uuid())
  query             String
  description       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  sessionId         String
  searchSession     SearchSession     @relation(fields: [sessionId], references: [id])
  searchExecutions  SearchExecution[]
  rawSearchResults  RawSearchResult[]
}

model SearchExecution {
  id                String            @id @default(uuid())
  status            String            // Consider using an Enum: "running", "completed", "failed", "pending"
  startTime         DateTime          @default(now())
  endTime           DateTime?
  resultCount       Int?
  error             String?
  queryId           String
  sessionId         String            // Added for easier access? Verify necessity. Usually via queryId -> sessionId
  searchQuery       SearchQuery       @relation(fields: [queryId], references: [id])
  searchSession     SearchSession     @relation(fields: [sessionId], references: [id]) // Direct relation to session
}

model RawSearchResult {
  id                String            @id @default(uuid())
  queryId           String
  searchExecutionId String?           // Optional: Link to the specific execution that found this result
  title             String
  url               String
  snippet           String?
  rank              Int
  searchEngine      String
  rawResponse       Json              // Ensure database supports JSON type
  searchQuery       SearchQuery       @relation(fields: [queryId], references: [id])
  processedResult   ProcessedResult?  // One-to-one relation to ProcessedResult
  // Optional relation to execution
  // searchExecution SearchExecution? @relation(fields: [searchExecutionId], references: [id])
}

model ProcessedResult {
  id                String            @id @default(uuid())
  rawResultId       String            @unique // Ensures one processed result per raw result
  sessionId         String
  title             String
  url               String            // Consider adding @@index([url]) for duplicate checking performance
  snippet           String?
  metadata          Json              // For extracted data like domain, filetype, etc.
  rawSearchResult   RawSearchResult   @relation(fields: [rawResultId], references: [id])
  searchSession     SearchSession     @relation(fields: [sessionId], references: [id])
  reviewTags        ReviewTagAssignment[]
  notes             Note[]
  duplicateOf       DuplicateRelationship[] @relation("primaryResult")
  duplicates        DuplicateRelationship[] @relation("duplicateResult")

  @@index([sessionId]) // Index for faster lookup by session
}

model DuplicateRelationship {
  id                String            @id @default(uuid())
  primaryResultId   String
  duplicateResultId String
  similarityScore   Float
  duplicateType     String            // E.g., "url_match", "title_match"
  primaryResult     ProcessedResult   @relation("primaryResult", fields: [primaryResultId], references: [id])
  duplicateResult   ProcessedResult   @relation("duplicateResult", fields: [duplicateResultId], references: [id])

  @@unique([primaryResultId, duplicateResultId]) // Prevent duplicate relationship entries
  @@index([primaryResultId])
  @@index([duplicateResultId])
}

model ReviewTag {
  id                String            @id @default(uuid())
  name              String
  color             String
  sessionId         String
  searchSession     SearchSession     @relation(fields: [sessionId], references: [id])
  assignments       ReviewTagAssignment[]

  @@unique([sessionId, name]) // Tags should be unique within a session
}

// Explicit many-to-many join table for tags and results
model ReviewTagAssignment {
  id                String            @id @default(uuid())
  tagId             String
  resultId          String
  tag               ReviewTag         @relation(fields: [tagId], references: [id])
  result            ProcessedResult   @relation(fields: [resultId], references: [id])

  assignedAt        DateTime          @default(now()) // Optional: track when tag was assigned

  @@unique([tagId, resultId]) // Prevent assigning the same tag multiple times
  @@index([tagId])
  @@index([resultId])
}

model ReviewAssignment {
  id                String            @id @default(uuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  // Missing fields like sessionId, stage, etc. Add as needed.
  // For example:
  // sessionId         String
  // searchSession     SearchSession     @relation(fields: [sessionId], references: [id])
  // reviewStage       String           // E.g., "title_abstract_screening", "full_text_review"
  // assignedAt        DateTime         @default(now())
}

model Note {
  id                String            @id @default(uuid())
  content           String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  resultId          String
  userId            String?           // Optional: track who wrote the note
  result            ProcessedResult   @relation(fields: [resultId], references: [id])
  // Optional relation to user
  // user              User?             @relation(fields: [userId], references: [id])

  @@index([resultId])
}

// ==============================================
// Session Membership (for Phase 2 multi-reviewer)
// ==============================================

model SessionMembership {
  id          String        @id @default(uuid())
  userId      String
  sessionId   String
  role        String        // e.g., "LeadReviewer", "Reviewer"
  assignedAt  DateTime      @default(now())

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  searchSession SearchSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionId]) // User can only have one role per session
  @@index([userId])
  @@index([sessionId])
} 